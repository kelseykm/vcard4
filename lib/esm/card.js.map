{"version":3,"file":"card.js","sources":["../../src/card.js"],"sourcesContent":["import { MissingArgument, InvalidArgument } from \"./errors/index.js\";\r\n\r\nexport class VCARD {\r\n  static cardinalityNoneOrOneProps = new Set([\r\n    \"AnniversaryProperty\",\r\n    \"BdayProperty\",\r\n    \"GenderProperty\",\r\n    \"BirthPlaceProperty\",\r\n    \"DeathPlaceProperty\",\r\n    \"DeathDateProperty\",\r\n    \"KindProperty\",\r\n    \"NProperty\",\r\n    \"ProdidProperty\",\r\n    \"RevProperty\",\r\n    \"UIDProperty\",\r\n  ]);\r\n\r\n  #props;\r\n\r\n  repr() {\r\n    const CRLF = \"\\r\\n\";\r\n\r\n    let value = \"\";\r\n    value += \"BEGIN:VCARD\" + CRLF;\r\n    value += \"VERSION:4.0\" + CRLF;\r\n\r\n    value +=\r\n      this.#props\r\n        .reduce((accumulatedProps, currentProp) => {\r\n          accumulatedProps.push(currentProp.repr());\r\n          return accumulatedProps;\r\n        }, [])\r\n        .join(CRLF) + CRLF;\r\n\r\n    value += \"END:VCARD\" + CRLF;\r\n\r\n    return value;\r\n  }\r\n\r\n  reprXML() {\r\n    let valueXML = \"\";\r\n    valueXML += '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\r\n    valueXML += '<vcards xmlns=\"urn:ietf:params:xml:ns:vcard-4.0\">';\r\n    valueXML += \"<vcard>\";\r\n\r\n    valueXML += this.#props.reduce(\r\n      (accumulatedParameters, currentParameter) =>\r\n        accumulatedParameters + currentParameter.reprXML(),\r\n      \"\"\r\n    );\r\n\r\n    valueXML += \"</vcard>\";\r\n    valueXML += \"</vcards>\";\r\n\r\n    return valueXML;\r\n  }\r\n\r\n  reprJSON() {\r\n    return [\r\n      \"vcard\",\r\n      this.#props.reduce((accumulatedProps, currentProp) => {\r\n        if (currentProp.constructor.identifier === \"Group\")\r\n          accumulatedProps = accumulatedProps.concat(currentProp.reprJSON());\r\n        else accumulatedProps.push(currentProp.reprJSON());\r\n\r\n        return accumulatedProps;\r\n      }, []),\r\n    ];\r\n  }\r\n\r\n  #validate(props) {\r\n    if (typeof props === \"undefined\")\r\n      throw new MissingArgument(\"Properties for VCARD must be supplied\");\r\n    else if (!Array.isArray(props))\r\n      throw new InvalidArgument(\r\n        \"Properties for VCARD must be passed in an array\"\r\n      );\r\n\r\n    const propertyInstanceCount = new Map([\r\n      [\"FNProperty\", 0],\r\n      [\"AnniversaryProperty\", 0],\r\n      [\"BdayProperty\", 0],\r\n      [\"GenderProperty\", 0],\r\n      [\"BirthPlaceProperty\", 0],\r\n      [\"DeathPlaceProperty\", 0],\r\n      [\"DeathDateProperty\", 0],\r\n      [\"KindProperty\", 0],\r\n      [\"NProperty\", 0],\r\n      [\"ProdidProperty\", 0],\r\n      [\"RevProperty\", 0],\r\n      [\"UIDProperty\", 0],\r\n    ]);\r\n    let hasMemberProperty = false;\r\n    let kindPropertyIsGroup = false;\r\n\r\n    for (const prop of props) {\r\n      if (!/(?:^Group$|Property$)/.test(prop.constructor.identifier))\r\n        throw new InvalidArgument(\"Unidentified item included in properties\");\r\n\r\n      let count;\r\n\r\n      switch (prop.constructor.identifier) {\r\n        case \"MemberProperty\":\r\n          hasMemberProperty = true;\r\n          break;\r\n\r\n        case \"KindProperty\":\r\n          if (/^group$/i.test(prop.value)) kindPropertyIsGroup = true;\r\n          break;\r\n\r\n        case \"Group\":\r\n          if (prop.hasMemberProperty) hasMemberProperty = true;\r\n\r\n          if (prop.kindPropertyIsGroup) kindPropertyIsGroup = true;\r\n\r\n          for (const propName of prop.propertyInstanceCount.keys()) {\r\n            const _groupCount = prop.propertyInstanceCount.get(propName);\r\n            const _cardcount = propertyInstanceCount.get(propName);\r\n\r\n            count = _groupCount + _cardcount;\r\n\r\n            propertyInstanceCount.set(propName, count);\r\n          }\r\n          break;\r\n\r\n        default:\r\n          if (!propertyInstanceCount.has(prop.constructor.identifier)) continue;\r\n\r\n          count = propertyInstanceCount.get(prop.constructor.identifier);\r\n          count++;\r\n          propertyInstanceCount.set(prop.constructor.identifier, count);\r\n      }\r\n    }\r\n\r\n    if (\r\n      Array.from(this.constructor.cardinalityNoneOrOneProps.keys()).some(\r\n        (property) => propertyInstanceCount.get(property) > 1\r\n      )\r\n    ) {\r\n      for (const property of propertyInstanceCount.keys()) {\r\n        if (propertyInstanceCount.get(property) <= 1) continue;\r\n\r\n        const offendingProps = props.filter(\r\n          (prop) => prop.constructor.identifier === property\r\n        );\r\n\r\n        if (!/ALTID=/.test(offendingProps[0]?.params))\r\n          throw new InvalidArgument(\r\n            \"AnniversaryProperty, BdayProperty, GenderProperty, BirthPlaceProperty, DeathPlaceProperty, DeathdateProperty, KindProperty, NProperty, ProdidProperty, RevProperty and UIDProperty must not have more than one instance supplied, unless they have similar AltidParameters\"\r\n          );\r\n\r\n        const referenceAltid = offendingProps[0].params\r\n          .split(\";\")\r\n          .filter((param) => /^ALTID=/.test(param))\r\n          .pop();\r\n\r\n        let followsCardinality = offendingProps.every((prop) => {\r\n          const altid = prop.params\r\n            .split(\";\")\r\n            .filter((param) => /^ALTID=/.test(param))\r\n            .pop();\r\n\r\n          return altid === referenceAltid;\r\n        });\r\n\r\n        if (offendingProps.length < propertyInstanceCount.get(property)) {\r\n          const groups = props.filter(\r\n            (prop) => prop.constructor.identifier === \"Group\"\r\n          );\r\n\r\n          followsCardinality =\r\n            followsCardinality &&\r\n            groups.every((group) => {\r\n              const offendingGroupProps = group.properties.filter(\r\n                (prop) => prop.constructor.identifier === property\r\n              );\r\n\r\n              return offendingGroupProps.every((prop) => {\r\n                const altid = prop.params\r\n                  .split(\";\")\r\n                  .filter((param) => /^ALTID=/.test(param))\r\n                  .pop();\r\n\r\n                return altid === referenceAltid;\r\n              });\r\n            });\r\n        }\r\n\r\n        if (!followsCardinality)\r\n          throw new InvalidArgument(\r\n            \"AnniversaryProperty, BdayProperty, GenderProperty, BirthPlaceProperty, DeathPlaceProperty, DeathdateProperty, KindProperty, NProperty, ProdidProperty, RevProperty and UIDProperty must not have more than one instance supplied, unless they have similar AltidParameters\"\r\n          );\r\n      }\r\n    }\r\n\r\n    if (propertyInstanceCount.get(\"FNProperty\") < 1)\r\n      throw new MissingArgument(\r\n        \"One or more FNProperty instances must be supplied\"\r\n      );\r\n    else if (hasMemberProperty && !kindPropertyIsGroup)\r\n      throw new InvalidArgument(\r\n        'MemberProperty should only be used if the value of the KindProperty is \"group\"'\r\n      );\r\n  }\r\n\r\n  constructor(props) {\r\n    this.#validate(props);\r\n    this.#props = props;\r\n\r\n    Object.freeze(this);\r\n  }\r\n}\r\n\r\nObject.freeze(VCARD);\r\n"],"names":["_props","WeakMap","_VCARD_brand","WeakSet","VCARD","props","_classCallCheck","_classPrivateMethodInitSpec","_classPrivateFieldInitSpec","_assertClassBrand","_validate","call","_classPrivateFieldSet","Object","freeze","_createClass","key","value","repr","CRLF","_classPrivateFieldGet","reduce","accumulatedProps","currentProp","push","join","reprXML","valueXML","accumulatedParameters","currentParameter","reprJSON","constructor","identifier","concat","MissingArgument","Array","isArray","InvalidArgument","propertyInstanceCount","Map","hasMemberProperty","kindPropertyIsGroup","_iterator","_createForOfIteratorHelper","_step","s","n","done","prop","test","count","_iterator3","keys","_step3","propName","_groupCount","get","_cardcount","set","err","e","f","has","from","cardinalityNoneOrOneProps","some","property","_iterator2","_step2","_loop","_offendingProps$","offendingProps","filter","params","referenceAltid","split","param","pop","followsCardinality","every","altid","length","groups","group","offendingGroupProps","properties","_defineProperty","Set"],"mappings":"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"}