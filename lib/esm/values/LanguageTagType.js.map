{"version":3,"file":"LanguageTagType.js","sources":["../../../src/values/LanguageTagType.js"],"sourcesContent":["import { BaseValue } from \"./BaseValue.js\";\nimport { MissingArgument, InvalidArgument } from \"../errors/index.js\";\n\nexport class LanguageTagType extends BaseValue {\n  static type = \"LANGUAGE-TAG\";\n  static identifier = \"LanguageTagType\";\n\n  #langTagValue;\n\n  #langTagRegexp =\n    /^(?:[a-zA-Z]{2,3}(-[a-zA-Z]{3}){0,3})(-[0-9A-Za-z]+){0,3}(-x(-[0-9A-Za-z]{1,8})+)?(-[0-9A-WY-Za-wy-z]+)?(-[0-9A-Za-z]+)?$/;\n\n  #validate(langTagValue) {\n    if (typeof langTagValue === \"undefined\")\n      throw new MissingArgument(\"Value for LanguageTagType must be supplied\");\n    else if (typeof langTagValue !== \"string\")\n      throw new TypeError(\"Value for LanguageTagType should be of type string\");\n    else if (!this.#langTagRegexp.test(langTagValue))\n      throw new InvalidArgument(\"Invalid language tag\");\n  }\n\n  get value() {\n    return this.#langTagValue;\n  }\n\n  get valueXML() {\n    return `<${this.constructor.type.toLowerCase()}>${\n      this.#langTagValue\n    }</${this.constructor.type.toLowerCase()}>`;\n  }\n\n  get valueJSON() {\n    return [this.constructor.type.toLowerCase(), this.#langTagValue];\n  }\n\n  constructor(langTagValue) {\n    super();\n\n    this.#validate(langTagValue);\n    this.#langTagValue = langTagValue;\n\n    this.checkAbstractPropertiesAndMethods();\n    Object.freeze(this);\n  }\n}\n\nObject.freeze(LanguageTagType);\n"],"names":["LanguageTagType","langTagValue","checkAbstractPropertiesAndMethods","Object","freeze","constructor","type","toLowerCase","BaseValue","MissingArgument","TypeError","test","InvalidArgument"],"mappings":"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"}