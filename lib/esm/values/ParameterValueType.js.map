{"version":3,"file":"ParameterValueType.js","sources":["../../../src/values/ParameterValueType.js"],"sourcesContent":["import { BaseValue } from \"./BaseValue.js\";\nimport { MissingArgument, InvalidArgument } from \"../errors/index.js\";\n\nexport class ParameterValueType extends BaseValue {\n  static type = \"TEXT\";\n  static identifier = \"ParameterValueType\";\n\n  #parameterValue;\n\n  #validate(parameterValue) {\n    if (typeof parameterValue === \"undefined\" || parameterValue === \"\")\n      throw new MissingArgument(\n        \"Value for ParameterValueType must be supplied\"\n      );\n    else if (typeof parameterValue !== \"string\")\n      throw new TypeError(\n        \"Only type string allowed for ParameterValueType value\"\n      );\n    else if (/[\\x00-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]/.test(parameterValue)) {\n      throw new InvalidArgument(\"Value includes forbidden characters\");\n    }\n  }\n\n  #cleanUp(parameterValue) {\n    return parameterValue\n      .replaceAll(\"^\", \"^^\")\n      .replaceAll(\"\\n\", \"^n\")\n      .replaceAll('\"', \"^â€™\");\n  }\n\n  #cleanUpXML(parameterValue) {\n    return parameterValue\n      .replaceAll(\"&\", \"&amp;\")\n      .replaceAll(\">\", \"&gt;\")\n      .replaceAll(\"<\", \"&lt;\")\n      .replaceAll('\"', \"&quot;\")\n      .replaceAll(\"'\", \"&apos;\");\n  }\n\n  get value() {\n    const cleanVal = this.#cleanUp(this.#parameterValue);\n\n    return /[:;]/.test(cleanVal) ? `\"${cleanVal}\"` : cleanVal;\n  }\n\n  get valueXML() {\n    return `<${this.constructor.type.toLowerCase()}>${this.#cleanUpXML(\n      this.#parameterValue\n    )}</${this.constructor.type.toLowerCase()}>`;\n  }\n\n  get valueJSON() {\n    return [this.constructor.type.toLowerCase(), this.#parameterValue];\n  }\n\n  get _unsafe_raw_value() {\n    return this.#parameterValue;\n  }\n\n  constructor(parameterValue) {\n    super();\n    this.#validate(parameterValue);\n    this.#parameterValue = parameterValue;\n\n    this.checkAbstractPropertiesAndMethods();\n    Object.freeze(this);\n  }\n}\n\nObject.freeze(ParameterValueType);\n"],"names":["_parameterValue","WeakMap","_validate","WeakSet","_cleanUp","_cleanUpXML","ParameterValueType","_BaseValue","_inherits","_super","_createSuper","parameterValue","_this","_classCallCheck","call","_classPrivateMethodInitSpec","_assertThisInitialized","_classPrivateFieldInitSpec","writable","value","_classPrivateMethodGet","_validate2","_classPrivateFieldSet","checkAbstractPropertiesAndMethods","Object","freeze","_createClass","key","get","cleanVal","_cleanUp2","_classPrivateFieldGet","test","concat","constructor","type","toLowerCase","_cleanUpXML2","BaseValue","MissingArgument","TypeError","InvalidArgument","replaceAll","_defineProperty"],"mappings":";;;;;AACsE,IAAAA,eAAA,oBAAAC,OAAA,EAAA,CAAA;AAAA,IAAAC,SAAA,oBAAAC,OAAA,EAAA,CAAA;AAAA,IAAAC,QAAA,oBAAAD,OAAA,EAAA,CAAA;AAAA,IAAAE,WAAA,oBAAAF,OAAA,EAAA,CAAA;AAEzDG,IAAAA,kBAAkB,0BAAAC,UAAA,EAAA;EAAAC,SAAA,CAAAF,kBAAA,EAAAC,UAAA,CAAA,CAAA;AAAA,EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,kBAAA,CAAA,CAAA;EAwD7B,SAAAA,kBAAAA,CAAYK,gBAAc,EAAE;AAAA,IAAA,IAAAC,KAAA,CAAA;AAAAC,IAAAA,eAAA,OAAAP,kBAAA,CAAA,CAAA;IAC1BM,KAAA,GAAAH,MAAA,CAAAK,IAAA,CAAA,IAAA,CAAA,CAAA;AAAQC,IAAAA,2BAAA,CAAAC,sBAAA,CAAAJ,KAAA,GAAAP,WAAA,CAAA,CAAA;AAAAU,IAAAA,2BAAA,CAAAC,sBAAA,CAAAJ,KAAA,GAAAR,QAAA,CAAA,CAAA;AAAAW,IAAAA,2BAAA,CAAAC,sBAAA,CAAAJ,KAAA,GAAAV,SAAA,CAAA,CAAA;AAAAe,IAAAA,0BAAA,CAAAD,sBAAA,CAAAJ,KAAA,GAAAZ,eAAA,EAAA;MAAAkB,QAAA,EAAA,IAAA;MAAAC,KAAA,EAAA,KAAA,CAAA;AAAA,KAAA,CAAA,CAAA;AACRC,IAAAA,sBAAA,CAAAJ,sBAAA,CAAAJ,KAAA,GAAAV,SAAA,EAAAmB,UAAA,CAAA,CAAAP,IAAA,CAAAE,sBAAA,CAAAJ,KAAA,GAAeD,gBAAc,CAAA,CAAA;AAC7BW,IAAAA,qBAAA,CAAAN,sBAAA,CAAAJ,KAAA,CAAAZ,EAAAA,eAAA,EAAuBW,gBAAc,CAAA,CAAA;IAErCC,KAAA,CAAKW,iCAAiC,EAAE,CAAA;AACxCC,IAAAA,MAAM,CAACC,MAAM,CAAAT,sBAAA,CAAAJ,KAAA,CAAK,CAAC,CAAA;AAAC,IAAA,OAAAA,KAAA,CAAA;AACtB,GAAA;AAACc,EAAAA,YAAA,CAAApB,kBAAA,EAAA,CAAA;IAAAqB,GAAA,EAAA,OAAA;IAAAC,GAAA,EA3BD,SAAAA,GAAAA,GAAY;AACV,MAAA,IAAMC,QAAQ,GAAAT,sBAAA,CAAG,IAAI,EAAAhB,QAAA,EAAA0B,SAAA,EAAAhB,IAAA,CAAJ,IAAI,EAAAiB,qBAAA,CAAU,IAAI,EAAA/B,eAAA,CAAiB,CAAA,CAAA;MAEpD,OAAO,MAAM,CAACgC,IAAI,CAACH,QAAQ,CAAC,GAAA,IAAA,CAAAI,MAAA,CAAOJ,QAAQ,EAAA,IAAA,CAAA,GAAMA,QAAQ,CAAA;AAC3D,KAAA;AAAC,GAAA,EAAA;IAAAF,GAAA,EAAA,UAAA;IAAAC,GAAA,EAED,SAAAA,GAAAA,GAAe;AACb,MAAA,OAAA,GAAA,CAAAK,MAAA,CAAW,IAAI,CAACC,WAAW,CAACC,IAAI,CAACC,WAAW,EAAE,EAAA,GAAA,CAAA,CAAAH,MAAA,CAAAb,sBAAA,CAAI,IAAI,EAAAf,WAAA,EAAAgC,YAAA,CAAAvB,CAAAA,IAAA,CAAJ,IAAI,EAAAiB,qBAAA,CACpD,IAAI,EAAA/B,eAAA,CAAA,CAAA,EAAA,IAAA,CAAA,CAAAiC,MAAA,CACA,IAAI,CAACC,WAAW,CAACC,IAAI,CAACC,WAAW,EAAE,EAAA,GAAA,CAAA,CAAA;AAC3C,KAAA;AAAC,GAAA,EAAA;IAAAT,GAAA,EAAA,WAAA;IAAAC,GAAA,EAED,SAAAA,GAAAA,GAAgB;AACd,MAAA,OAAO,CAAC,IAAI,CAACM,WAAW,CAACC,IAAI,CAACC,WAAW,EAAE,EAAAL,qBAAA,CAAE,IAAI,EAAA/B,eAAA,CAAiB,CAAA,CAAA;AACpE,KAAA;AAAC,GAAA,EAAA;IAAA2B,GAAA,EAAA,mBAAA;IAAAC,GAAA,EAED,SAAAA,GAAAA,GAAwB;AACtB,MAAA,OAAAG,qBAAA,CAAO,IAAI,EAAA/B,eAAA,CAAA,CAAA;AACb,KAAA;AAAC,GAAA,CAAA,CAAA,CAAA;AAAA,EAAA,OAAAM,kBAAA,CAAA;AAAA,CAAA,CAtDqCgC,SAAS,EAAA;AAgEhD,SAAAjB,UAAAA,CA1DWV,cAAc,EAAE;AACxB,EAAA,IAAI,OAAOA,cAAc,KAAK,WAAW,IAAIA,cAAc,KAAK,EAAE,EAChE,MAAM,IAAI4B,eAAe,CACvB,+CACF,CAAC,CAAC,KACC,IAAI,OAAO5B,cAAc,KAAK,QAAQ,EACzC,MAAM,IAAI6B,SAAS,CACjB,uDACF,CAAC,CAAC,KACC,IAAI,kCAAkC,CAACR,IAAI,CAACrB,cAAc,CAAC,EAAE;AAChE,IAAA,MAAM,IAAI8B,eAAe,CAAC,qCAAqC,CAAC,CAAA;AAClE,GAAA;AACF,CAAA;AAAC,SAAAX,SAAAA,CAEQnB,cAAc,EAAE;EACvB,OAAOA,cAAc,CAClB+B,UAAU,CAAC,GAAG,EAAE,IAAI,CAAC,CACrBA,UAAU,CAAC,IAAI,EAAE,IAAI,CAAC,CACtBA,UAAU,CAAC,GAAG,EAAE,IAAI,CAAC,CAAA;AAC1B,CAAA;AAAC,SAAAL,YAAAA,CAEW1B,cAAc,EAAE;AAC1B,EAAA,OAAOA,cAAc,CAClB+B,UAAU,CAAC,GAAG,EAAE,OAAO,CAAC,CACxBA,UAAU,CAAC,GAAG,EAAE,MAAM,CAAC,CACvBA,UAAU,CAAC,GAAG,EAAE,MAAM,CAAC,CACvBA,UAAU,CAAC,GAAG,EAAE,QAAQ,CAAC,CACzBA,UAAU,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAA;AAC9B,CAAA;AAACC,eAAA,CAlCUrC,kBAAkB,EAAA,MAAA,EACf,MAAM,CAAA,CAAA;AAAAqC,eAAA,CADTrC,kBAAkB,EAAA,YAAA,EAET,oBAAoB,CAAA,CAAA;AAgE1CkB,MAAM,CAACC,MAAM,CAACnB,kBAAkB,CAAC;;;;"}