{"version":3,"file":"ParameterValueType.js","sources":["../../../src/values/ParameterValueType.js"],"sourcesContent":["import { BaseValue } from \"./BaseValue.js\";\nimport { MissingArgument, InvalidArgument } from \"../errors/index.js\";\n\nexport class ParameterValueType extends BaseValue {\n  static type = \"TEXT\";\n  static identifier = \"ParameterValueType\";\n\n  #parameterValue;\n\n  #validate(parameterValue) {\n    if (typeof parameterValue === \"undefined\" || parameterValue === \"\")\n      throw new MissingArgument(\n        \"Value for ParameterValueType must be supplied\"\n      );\n    else if (typeof parameterValue !== \"string\")\n      throw new TypeError(\n        \"Only type string allowed for ParameterValueType value\"\n      );\n    else if (/[\\x00-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]/.test(parameterValue)) {\n      throw new InvalidArgument(\"Value includes forbidden characters\");\n    }\n  }\n\n  #cleanUp(parameterValue) {\n    return parameterValue\n      .replaceAll(\"^\", \"^^\")\n      .replaceAll(\"\\n\", \"^n\")\n      .replaceAll('\"', \"^â€™\");\n  }\n\n  #cleanUpXML(parameterValue) {\n    return parameterValue\n      .replaceAll(\"&\", \"&amp;\")\n      .replaceAll(\">\", \"&gt;\")\n      .replaceAll(\"<\", \"&lt;\")\n      .replaceAll('\"', \"&quot;\")\n      .replaceAll(\"'\", \"&apos;\");\n  }\n\n  get value() {\n    const cleanVal = this.#cleanUp(this.#parameterValue);\n\n    return /[:;]/.test(cleanVal) ? `\"${cleanVal}\"` : cleanVal;\n  }\n\n  get valueXML() {\n    return `<${this.constructor.type.toLowerCase()}>${this.#cleanUpXML(\n      this.#parameterValue\n    )}</${this.constructor.type.toLowerCase()}>`;\n  }\n\n  get valueJSON() {\n    return [this.constructor.type.toLowerCase(), this.#parameterValue];\n  }\n\n  get _unsafe_raw_value() {\n    return this.#parameterValue;\n  }\n\n  constructor(parameterValue) {\n    super();\n    this.#validate(parameterValue);\n    this.#parameterValue = parameterValue;\n\n    this.checkAbstractPropertiesAndMethods();\n    Object.freeze(this);\n  }\n}\n\nObject.freeze(ParameterValueType);\n"],"names":["ParameterValueType","parameterValue","checkAbstractPropertiesAndMethods","Object","freeze","cleanVal","test","constructor","type","toLowerCase","BaseValue","MissingArgument","TypeError","InvalidArgument","replaceAll"],"mappings":"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"}