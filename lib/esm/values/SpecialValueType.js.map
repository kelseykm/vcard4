{"version":3,"file":"SpecialValueType.js","sources":["../../../src/values/SpecialValueType.js"],"sourcesContent":["import { BaseValue } from \"./BaseValue.js\";\nimport { MissingArgument, InvalidArgument } from \"../errors/index.js\";\n\nexport class SpecialValueType extends BaseValue {\n  static identifier = \"SpecialValueType\";\n  static type = \"TEXT\";\n\n  #validateAndSet(value, targetProp) {\n    if (typeof value === \"undefined\" || typeof targetProp === \"undefined\")\n      throw new MissingArgument(\n        \"Value and target property for SpecialValueType must be supplied\"\n      );\n\n    const valueRegExp =\n      /^(?:individual|group|org|location|application|x-[a-z0-9-]+)$/i;\n\n    let valueCopy;\n    let _tempValue;\n\n    switch (true) {\n      case /^KindProperty$/i.test(targetProp):\n        if (typeof value !== \"string\" || !valueRegExp.test(value))\n          throw new InvalidArgument(\n            \"Invalid value for SpecialValueType for KindProperty\"\n          );\n\n        this.value = value;\n        this.valueXML = `<text>${value}</text>`;\n        this.valueJSON = [this.constructor.type.toLowerCase(), value];\n\n        break;\n      case /^NProperty$/i.test(targetProp):\n        if (!Array.isArray(value) || value.length !== 5)\n          throw new InvalidArgument(\n            \"Invalid value for SpecialValueType for NProperty. It should be an array with a length of 5\"\n          );\n\n        for (let index = 0; index < value.length; index++)\n          if (value[index])\n            if (\n              value[index].constructor.identifier !== \"TextType\" &&\n              value[index].constructor.identifier !== \"TextListType\"\n            )\n              throw new TypeError(\n                \"Invalid value for SpecialValueType for NProperty. The items in the array, if present, should be of type TextType or TextListType\"\n              );\n\n        valueCopy = [...value];\n\n        for (let index = 0; index < valueCopy.length; index++)\n          if (valueCopy[index]) valueCopy[index] = valueCopy[index].repr();\n\n        this.value = valueCopy.join(\";\");\n        this.valueXML = \"\";\n        this.valueJSON = [];\n\n        for (let index = 0; index < value.length; index++)\n          switch (index) {\n            case 0:\n              if (!value[index]) {\n                this.valueXML += \"<surname/>\";\n                this.valueJSON[index] = \"\";\n              } else {\n                this.valueXML += value[index]\n                  .reprXML()\n                  .replaceAll(\"text>\", \"surname>\");\n\n                _tempValue = value[index].reprJSON();\n                if (_tempValue.length === 2)\n                  this.valueJSON[index] = _tempValue.pop();\n                else {\n                  _tempValue.shift();\n                  this.valueJSON[index] = _tempValue;\n                }\n              }\n\n              break;\n            case 1:\n              if (!value[index]) {\n                this.valueXML += \"<given/>\";\n                this.valueJSON[index] = \"\";\n              } else {\n                this.valueXML += value[index]\n                  .reprXML()\n                  .replaceAll(\"text>\", \"given>\");\n\n                _tempValue = value[index].reprJSON();\n                if (_tempValue.length === 2)\n                  this.valueJSON[index] = _tempValue.pop();\n                else {\n                  _tempValue.shift();\n                  this.valueJSON[index] = _tempValue;\n                }\n              }\n\n              break;\n            case 2:\n              if (!value[index]) {\n                this.valueXML += \"<additional/>\";\n                this.valueJSON[index] = \"\";\n              } else {\n                this.valueXML += value[index]\n                  .reprXML()\n                  .replaceAll(\"text>\", \"additional>\");\n\n                _tempValue = value[index].reprJSON();\n                if (_tempValue.length === 2)\n                  this.valueJSON[index] = _tempValue.pop();\n                else {\n                  _tempValue.shift();\n                  this.valueJSON[index] = _tempValue;\n                }\n              }\n\n              break;\n            case 3:\n              if (!value[index]) {\n                this.valueXML += \"<prefix/>\";\n                this.valueJSON[index] = \"\";\n              } else {\n                this.valueXML += value[index]\n                  .reprXML()\n                  .replaceAll(\"text>\", \"prefix>\");\n\n                _tempValue = value[index].reprJSON();\n                if (_tempValue.length === 2)\n                  this.valueJSON[index] = _tempValue.pop();\n                else {\n                  _tempValue.shift();\n                  this.valueJSON[index] = _tempValue;\n                }\n              }\n\n              break;\n            case 4:\n              if (!value[index]) {\n                this.valueXML += \"<suffix/>\";\n                this.valueJSON[index] = \"\";\n              } else {\n                this.valueXML += value[index]\n                  .reprXML()\n                  .replaceAll(\"text>\", \"suffix>\");\n\n                _tempValue = value[index].reprJSON();\n                if (_tempValue.length === 2)\n                  this.valueJSON[index] = _tempValue.pop();\n                else {\n                  _tempValue.shift();\n                  this.valueJSON[index] = _tempValue;\n                }\n              }\n          }\n\n        this.valueJSON = [this.constructor.type.toLowerCase(), this.valueJSON];\n\n        break;\n      case /^GenderProperty$/i.test(targetProp):\n        if (!Array.isArray(value) || value.length !== 2)\n          throw new InvalidArgument(\n            \"Invalid value for SpecialValueType for GenderProperty. It should be an array with a length of 2\"\n          );\n        else if (value[0] && value[0].constructor.identifier !== \"SexType\")\n          throw new TypeError(\n            \"Invalid value for SpecialValueType for GenderProperty. The first item in the array, if present, should be of type SexType\"\n          );\n        else if (\n          (!value[0] && !value[1]) ||\n          (value[1] && value[1].constructor.identifier !== \"TextType\")\n        )\n          throw new TypeError(\n            \"Invalid value for SpecialValueType for GenderProperty. The second item in the array, if present, should be of type TextType\"\n          );\n\n        this.value = value.reduce((accumulated, current) => {\n          return accumulated\n            ? `${accumulated};${current.repr()}`\n            : current.repr();\n        }, \"\");\n\n        this.valueXML = value.reduce(\n          (accumulated, current) => accumulated + current.reprXML(),\n          \"\"\n        );\n\n        this.valueJSON = value.reduce((accumulated, current) => {\n          accumulated.push(current.reprJSON().pop());\n          return accumulated;\n        }, []);\n\n        if (this.valueJSON.length === 1)\n          this.valueJSON.unshift(this.constructor.type.toLowerCase());\n        else\n          this.valueJSON = [\n            this.constructor.type.toLowerCase(),\n            this.valueJSON,\n          ];\n\n        break;\n      case /^AdrProperty$/i.test(targetProp):\n        if (!Array.isArray(value) || value.length !== 7)\n          throw new InvalidArgument(\n            \"Invalid value for SpecialValueType for AdrProperty. It should be an array with a length of 7\"\n          );\n\n        for (let index = 0; index < value.length; index++)\n          if (value[index])\n            if (value[index].constructor.identifier !== \"TextType\")\n              throw new TypeError(\n                \"Invalid value for SpecialValueType for AdrProperty. The items in the array, if present, should be of type TextType\"\n              );\n\n        valueCopy = [...value];\n\n        for (let index = 0; index < valueCopy.length; index++)\n          if (valueCopy[index]) valueCopy[index] = valueCopy[index].repr();\n\n        this.value = valueCopy.join(\";\");\n        this.valueXML = \"\";\n        this.valueJSON = [];\n\n        for (let index = 0; index < value.length; index++)\n          switch (index) {\n            case 0:\n              if (!value[index]) {\n                this.valueXML += \"<pobox/>\";\n                this.valueJSON[index] = \"\";\n              } else {\n                this.valueXML += value[index]\n                  .reprXML()\n                  .replaceAll(\"text>\", \"pobox>\");\n\n                _tempValue = value[index].reprJSON();\n                if (_tempValue.length === 2)\n                  this.valueJSON[index] = _tempValue.pop();\n                else {\n                  _tempValue.shift();\n                  this.valueJSON[index] = _tempValue;\n                }\n              }\n\n              break;\n            case 1:\n              if (!value[index]) {\n                this.valueXML += \"<ext/>\";\n                this.valueJSON[index] = \"\";\n              } else {\n                this.valueXML += value[index]\n                  .reprXML()\n                  .replaceAll(\"text>\", \"ext>\");\n\n                _tempValue = value[index].reprJSON();\n                if (_tempValue.length === 2)\n                  this.valueJSON[index] = _tempValue.pop();\n                else {\n                  _tempValue.shift();\n                  this.valueJSON[index] = _tempValue;\n                }\n              }\n\n              break;\n            case 2:\n              if (!value[index]) {\n                this.valueXML += \"<street/>\";\n                this.valueJSON[index] = \"\";\n              } else {\n                this.valueXML += value[index]\n                  .reprXML()\n                  .replaceAll(\"text>\", \"street>\");\n\n                _tempValue = value[index].reprJSON();\n                if (_tempValue.length === 2)\n                  this.valueJSON[index] = _tempValue.pop();\n                else {\n                  _tempValue.shift();\n                  this.valueJSON[index] = _tempValue;\n                }\n              }\n\n              break;\n            case 3:\n              if (!value[index]) {\n                this.valueXML += \"<locality/>\";\n                this.valueJSON[index] = \"\";\n              } else {\n                this.valueXML += value[index]\n                  .reprXML()\n                  .replaceAll(\"text>\", \"locality>\");\n\n                _tempValue = value[index].reprJSON();\n                if (_tempValue.length === 2)\n                  this.valueJSON[index] = _tempValue.pop();\n                else {\n                  _tempValue.shift();\n                  this.valueJSON[index] = _tempValue;\n                }\n              }\n\n              break;\n            case 4:\n              if (!value[index]) {\n                this.valueXML += \"<region/>\";\n                this.valueJSON[index] = \"\";\n              } else {\n                this.valueXML += value[index]\n                  .reprXML()\n                  .replaceAll(\"text>\", \"region>\");\n\n                _tempValue = value[index].reprJSON();\n                if (_tempValue.length === 2)\n                  this.valueJSON[index] = _tempValue.pop();\n                else {\n                  _tempValue.shift();\n                  this.valueJSON[index] = _tempValue;\n                }\n              }\n\n              break;\n            case 5:\n              if (!value[index]) {\n                this.valueXML += \"<code/>\";\n                this.valueJSON[index] = \"\";\n              } else {\n                this.valueXML += value[index]\n                  .reprXML()\n                  .replaceAll(\"text>\", \"code>\");\n\n                _tempValue = value[index].reprJSON();\n                if (_tempValue.length === 2)\n                  this.valueJSON[index] = _tempValue.pop();\n                else {\n                  _tempValue.shift();\n                  this.valueJSON[index] = _tempValue;\n                }\n              }\n\n              break;\n            case 6:\n              if (!value[index]) {\n                this.valueXML += \"<country/>\";\n                this.valueJSON[index] = \"\";\n              } else {\n                this.valueXML += value[index]\n                  .reprXML()\n                  .replaceAll(\"text>\", \"country>\");\n\n                _tempValue = value[index].reprJSON();\n                if (_tempValue.length === 2)\n                  this.valueJSON[index] = _tempValue.pop();\n                else {\n                  _tempValue.shift();\n                  this.valueJSON[index] = _tempValue;\n                }\n              }\n          }\n\n        this.valueJSON = [this.constructor.type.toLowerCase(), this.valueJSON];\n\n        break;\n      case /^OrgProperty$/i.test(targetProp):\n        if (!Array.isArray(value) || !(value.length >= 1))\n          throw new InvalidArgument(\n            \"Invalid value for SpecialValueType for OrgProperty. It should be an array with at least one item\"\n          );\n\n        for (let index = 0; index < value.length; index++)\n          if (value[index]?.constructor?.identifier !== \"TextType\")\n            throw new TypeError(\n              \"Invalid value for SpecialValueType for OrgProperty. The items in the array should be of type TextType\"\n            );\n\n        this.value = value.reduce((accumulated, current) => {\n          return accumulated\n            ? `${accumulated};${current.repr()}`\n            : current.repr();\n        }, \"\");\n\n        this.valueXML = value.reduce(\n          (accumulated, current) => accumulated + current.reprXML(),\n          \"\"\n        );\n\n        this.valueJSON = value.reduce((accumulated, current) => {\n          accumulated.push(current.reprJSON().pop());\n          return accumulated;\n        }, []);\n\n        if (this.valueJSON.length === 1)\n          this.valueJSON.unshift(this.constructor.type.toLowerCase());\n        else\n          this.valueJSON = [\n            this.constructor.type.toLowerCase(),\n            this.valueJSON,\n          ];\n\n        break;\n      case /^ClientpidmapProperty$/i.test(targetProp):\n        if (!Array.isArray(value) || value.length !== 2)\n          throw new InvalidArgument(\n            \"Invalid value for SpecialValueType for ClientpidmapProperty. It should be an array with a length of 2\"\n          );\n        else if (value[0]?.constructor?.identifier !== \"IntegerType\")\n          throw new TypeError(\n            \"Invalid value for SpecialValueType for ClientpidmapProperty. The first item in the array should be of type IntegerType\"\n          );\n        else if (0 >= Number(value[0].repr()))\n          throw new InvalidArgument(\n            \"Invalid value for SpecialValueType for ClientpidmapProperty. The first item in the array should be a positive integer of type IntegerType. Zero is not allowed\"\n          );\n        else if (value[1]?.constructor?.identifier !== \"URIType\")\n          throw new TypeError(\n            \"Invalid value for SpecialValueType for ClientpidmapProperty. The second item in the array should be of type URIType\"\n          );\n\n        this.value = value.reduce((accumulated, current) => {\n          return accumulated\n            ? `${accumulated};${current.repr()}`\n            : current.repr();\n        }, \"\");\n\n        this.valueXML = value.reduce(\n          (accumulated, current) => accumulated + current.reprXML(),\n          \"\"\n        );\n\n        this.valueJSON = [\n          \"unknown\",\n          value.reduce((accumulated, current) => {\n            accumulated.push(current.reprJSON().pop());\n            return accumulated;\n          }, []),\n        ];\n\n        break;\n      default:\n        throw new InvalidArgument(\n          \"Invalid target property for SpecialValueType\"\n        );\n    }\n  }\n\n  constructor(value, targetProp) {\n    super();\n\n    this.#validateAndSet(value, targetProp);\n    this.targetProp = targetProp.toUpperCase();\n\n    this.checkAbstractPropertiesAndMethods();\n    Object.freeze(this);\n  }\n}\n\nObject.freeze(SpecialValueType);\n"],"names":["SpecialValueType","value","targetProp","toUpperCase","checkAbstractPropertiesAndMethods","Object","freeze","BaseValue","MissingArgument","valueRegExp","valueCopy","_tempValue","test","InvalidArgument","valueXML","valueJSON","constructor","type","toLowerCase","Array","isArray","length","index","identifier","TypeError","repr","join","reprXML","replaceAll","reprJSON","pop","shift","reduce","accumulated","current","push","unshift","Number"],"mappings":"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"}