{"version":3,"file":"Parser.js","sources":["../../../src/parse/Parser.js"],"sourcesContent":["import {\n  MissingArgument,\n  InvalidArgument,\n  InvalidVcard,\n} from \"../errors/index.js\";\n\nexport class Parser {\n  static identifier = \"Parser\";\n  static knownProperties = new Set([\n    \"BEGIN\",\n    \"VERSION\",\n    \"END\",\n    \"SOURCE\",\n    \"KIND\",\n    \"XML\",\n    \"FN\",\n    \"N\",\n    \"NICKNAME\",\n    \"PHOTO\",\n    \"BDAY\",\n    \"ANNIVERSARY\",\n    \"GENDER\",\n    \"BIRTHPLACE\",\n    \"DEATHPLACE\",\n    \"DEATHDATE\",\n    \"EXPERTISE\",\n    \"HOBBY\",\n    \"INTEREST\",\n    \"ADR\",\n    \"TEL\",\n    \"EMAIL\",\n    \"IMPP\",\n    \"LANG\",\n    \"CONTACT-URI\",\n    \"TZ\",\n    \"GEO\",\n    \"TITLE\",\n    \"ROLE\",\n    \"LOGO\",\n    \"ORG\",\n    \"MEMBER\",\n    \"RELATED\",\n    \"ORG-DIRECTORY\",\n    \"CATEGORIES\",\n    \"NOTE\",\n    \"PRODID\",\n    \"REV\",\n    \"SOUND\",\n    \"UID\",\n    \"CLIENTPIDMAP\",\n    \"URL\",\n    \"KEY\",\n    \"FBURL\",\n    \"CALADRURI\",\n    \"CALURI\",\n  ]);\n  static knownParameters = new Set([\n    \"LANGUAGE\",\n    \"VALUE\",\n    \"PREF\",\n    \"ALTID\",\n    \"PID\",\n    \"TYPE\",\n    \"MEDIATYPE\",\n    \"CALSCALE\",\n    \"SORTAS\",\n    \"GEO\",\n    \"TZ\",\n    \"LABEL\",\n    \"CC\",\n    \"INDEX\",\n    \"LEVEL\",\n  ]);\n\n  #tokenizedVcard;\n\n  #validateTokenizedVcard(tokenizedVcard) {\n    if (typeof tokenizedVcard === \"undefined\")\n      throw new MissingArgument(\n        \"Tokenized vCard to be parsed must be supplied\"\n      );\n    else if (!Array.isArray(tokenizedVcard))\n      throw new TypeError(\"Tokenized vCard to be parsed must be an array\");\n\n    const relevantPropCount = new Map([\n      [\"BEGIN\", 0],\n      [\"VERSION\", 0],\n      [\"END\", 0],\n      [\"FN\", 0],\n      [\"ANNIVERSARY\", 0],\n      [\"BDAY\", 0],\n      [\"GENDER\", 0],\n      [\"BIRTHPLACE\", 0],\n      [\"DEATHPLACE\", 0],\n      [\"DEATHDATE\", 0],\n      [\"KIND\", 0],\n      [\"N\", 0],\n      [\"PRODID\", 0],\n      [\"REV\", 0],\n      [\"UID\", 0],\n    ]);\n\n    for (const token of tokenizedVcard) {\n      let count = 0;\n      if (relevantPropCount.has(token.property)) {\n        count = relevantPropCount.get(token.property);\n        count++;\n        relevantPropCount.set(token.property, count);\n      }\n\n      if (\n        !this.constructor.knownProperties.has(token.property) &&\n        !token.property.startsWith(\"X-\")\n      )\n        throw new InvalidVcard(`vCard has unknown property: ${token.property}`);\n      else if (token.property === \"VERSION\" && token.value !== \"4.0\")\n        throw new InvalidArgument(`Unsupported vCard version: ${token.value}`);\n\n      for (const parameter of Object.keys(token.parameters)) {\n        if (\n          !this.constructor.knownParameters.has(parameter) &&\n          !parameter.startsWith(\"X-\")\n        )\n          throw new InvalidVcard(\n            `vCard has unknown parameter: ${parameter}, on ${token.property} property`\n          );\n      }\n    }\n\n    for (const prop of relevantPropCount.keys()) {\n      switch (prop) {\n        case \"BEGIN\":\n        case \"VERSION\":\n        case \"END\":\n          if (relevantPropCount.get(prop) !== 1)\n            throw new InvalidVcard(\n              \"vCard must have one of each BEGIN, VERSION and END properties\"\n            );\n          break;\n\n        case \"FN\":\n          if (relevantPropCount.get(prop) < 1)\n            throw new InvalidVcard(\"vCard must have at least one FN property\");\n          break;\n\n        default:\n          if (relevantPropCount.get(prop) > 1) {\n            const offendingTokens = tokenizedVcard.filter(\n              (token) => token.property === prop\n            );\n\n            if (\n              !offendingTokens.every((token) =>\n                token.parameters.hasOwnProperty(\"ALTID\")\n              ) ||\n              offendingTokens.some(\n                (token) =>\n                  token.parameters[\"ALTID\"] !==\n                  offendingTokens[0].parameters[\"ALTID\"]\n              )\n            )\n              throw new InvalidVcard(\n                \"vCard must not have more than one ANNIVERSARY, BDAY, GENDER, BIRTHPLACE, DEATHPLACE, DEATHDATE, KIND, N, PRODID, REV or UID property, unless they have the same ALTID parameter\"\n              );\n          }\n      }\n    }\n  }\n\n  #removeUnnecessaryFields(tokenizedVcard) {\n    return tokenizedVcard.filter(\n      (token) =>\n        token.property !== \"BEGIN\" &&\n        token.property !== \"VERSION\" &&\n        token.property !== \"END\"\n    );\n  }\n\n  #parseToken(token) {\n    let _parsedToken;\n\n    switch (token.property) {\n      case \"N\":\n        _parsedToken = { ...token };\n        _parsedToken[\"value\"] = {\n          familyNames: token.value[0],\n          givenNames: token.value[1],\n          additionalNames: token.value[2],\n          honorificPrefixes: token.value[3],\n          honorificSuffixes: token.value[4],\n        };\n        return _parsedToken;\n\n      case \"ADR\":\n        _parsedToken = { ...token };\n        _parsedToken[\"value\"] = {\n          postOfficeBox: token.value[0],\n          extendedAddress: token.value[1],\n          streetAddress: token.value[2],\n          locality: token.value[3],\n          region: token.value[4],\n          postalCode: token.value[5],\n          countryName: token.value[6],\n        };\n        return _parsedToken;\n\n      case \"GENDER\":\n        _parsedToken = { ...token };\n        if (Array.isArray(token.value))\n          _parsedToken[\"value\"] = {\n            sex: token.value[0],\n            gender: token.value[1],\n          };\n        else\n          _parsedToken[\"value\"] = {\n            sex: token.value,\n            gender: \"\",\n          };\n        return _parsedToken;\n    }\n\n    return token;\n  }\n\n  get parsed() {\n    const _parsedTokens = [];\n    for (const token of this.#tokenizedVcard)\n      _parsedTokens.push(this.#parseToken(token));\n\n    return {\n      parsedVcard: _parsedTokens,\n      get properties() {\n        return Array.from(\n          new Set(\n            _parsedTokens.reduce((accumulated, current) => {\n              accumulated.push(current.property);\n              return accumulated;\n            }, [])\n          )\n        );\n      },\n      get propertiesWithoutParameters() {\n        return Array.from(\n          new Set(\n            _parsedTokens.reduce((accumulated, current) => {\n              if (Object.keys(current.parameters).length === 0)\n                accumulated.push(current.property);\n              return accumulated;\n            }, [])\n          )\n        );\n      },\n      get propertiesWithParameters() {\n        return Array.from(\n          new Set(\n            _parsedTokens.reduce((accumulated, current) => {\n              if (Object.keys(current.parameters).length > 0)\n                accumulated.push(current.property);\n              return accumulated;\n            }, [])\n          )\n        );\n      },\n      getProperty(property = \"\") {\n        return _parsedTokens.filter(\n          (parsedToken) => parsedToken.property === property\n        );\n      },\n      get groups() {\n        return Array.from(\n          new Set(\n            _parsedTokens.reduce((accumulated, current) => {\n              current.group && accumulated.push(current.group);\n              return accumulated;\n            }, [])\n          )\n        );\n      },\n      getGroup(group = \"\") {\n        return _parsedTokens.filter(\n          (parsedToken) => parsedToken.group === group\n        );\n      },\n      get repeatingProperties() {\n        const _repeatingProperties = {};\n        const propertiesCount = new Map();\n\n        _parsedTokens.forEach((parsedToken) => {\n          if (propertiesCount.has(parsedToken.property)) {\n            let count = propertiesCount.get(parsedToken.property);\n            count++;\n            propertiesCount.set(parsedToken.property, count);\n          } else propertiesCount.set(parsedToken.property, 1);\n        });\n\n        for (const property of propertiesCount.keys()) {\n          const count = propertiesCount.get(property);\n          if (count > 1) _repeatingProperties[property] = count;\n        }\n\n        return _repeatingProperties;\n      },\n    };\n  }\n\n  constructor(tokenizedVcard) {\n    this.#validateTokenizedVcard(tokenizedVcard);\n    this.#tokenizedVcard = this.#removeUnnecessaryFields(tokenizedVcard);\n\n    Object.freeze(this);\n  }\n}\n\nObject.freeze(Parser);\n"],"names":["_tokenizedVcard","WeakMap","_validateTokenizedVcard","WeakSet","_removeUnnecessaryFields","_parseToken","Parser","tokenizedVcard","_classCallCheck","_classPrivateMethodInitSpec","_classPrivateFieldInitSpec","writable","value","_classPrivateMethodGet","_validateTokenizedVcard2","call","_classPrivateFieldSet","_removeUnnecessaryFields2","Object","freeze","_createClass","key","get","_parsedTokens","_iterator","_createForOfIteratorHelper","_classPrivateFieldGet","_step","s","n","done","token","push","_parseToken2","err","e","f","parsedVcard","properties","Array","from","Set","reduce","accumulated","current","property","propertiesWithoutParameters","keys","parameters","length","propertiesWithParameters","getProperty","arguments","undefined","filter","parsedToken","groups","group","getGroup","repeatingProperties","_repeatingProperties","propertiesCount","Map","forEach","has","count","set","_iterator2","_step2","MissingArgument","isArray","TypeError","relevantPropCount","_iterator3","_step3","constructor","knownProperties","startsWith","InvalidVcard","concat","InvalidArgument","_i","_Object$keys","parameter","knownParameters","_iterator4","_step4","_loop","prop","offendingTokens","every","hasOwnProperty","some","_parsedToken","_objectSpread","familyNames","givenNames","additionalNames","honorificPrefixes","honorificSuffixes","postOfficeBox","extendedAddress","streetAddress","locality","region","postalCode","countryName","sex","gender","_defineProperty"],"mappings":"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"}