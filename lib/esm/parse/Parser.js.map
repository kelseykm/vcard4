{"version":3,"file":"Parser.js","sources":["../../../src/parse/Parser.js"],"sourcesContent":["import {\n  MissingArgument,\n  InvalidArgument,\n  InvalidVcard,\n} from \"../errors/index.js\";\n\nexport class Parser {\n  static identifier = \"Parser\";\n  static knownProperties = new Set([\n    \"BEGIN\",\n    \"VERSION\",\n    \"END\",\n    \"SOURCE\",\n    \"KIND\",\n    \"XML\",\n    \"FN\",\n    \"N\",\n    \"NICKNAME\",\n    \"PHOTO\",\n    \"BDAY\",\n    \"ANNIVERSARY\",\n    \"GENDER\",\n    \"BIRTHPLACE\",\n    \"DEATHPLACE\",\n    \"DEATHDATE\",\n    \"EXPERTISE\",\n    \"HOBBY\",\n    \"INTEREST\",\n    \"ADR\",\n    \"TEL\",\n    \"EMAIL\",\n    \"IMPP\",\n    \"LANG\",\n    \"CONTACT-URI\",\n    \"TZ\",\n    \"GEO\",\n    \"TITLE\",\n    \"ROLE\",\n    \"LOGO\",\n    \"ORG\",\n    \"MEMBER\",\n    \"RELATED\",\n    \"ORG-DIRECTORY\",\n    \"CATEGORIES\",\n    \"NOTE\",\n    \"PRODID\",\n    \"REV\",\n    \"SOUND\",\n    \"UID\",\n    \"CLIENTPIDMAP\",\n    \"URL\",\n    \"KEY\",\n    \"FBURL\",\n    \"CALADRURI\",\n    \"CALURI\",\n  ]);\n  static knownParameters = new Set([\n    \"LANGUAGE\",\n    \"VALUE\",\n    \"PREF\",\n    \"ALTID\",\n    \"PID\",\n    \"TYPE\",\n    \"MEDIATYPE\",\n    \"CALSCALE\",\n    \"SORTAS\",\n    \"GEO\",\n    \"TZ\",\n    \"LABEL\",\n    \"CC\",\n    \"INDEX\",\n    \"LEVEL\",\n  ]);\n\n  #tokenizedVcard;\n\n  #validateTokenizedVcard(tokenizedVcard) {\n    if (typeof tokenizedVcard === \"undefined\")\n      throw new MissingArgument(\n        \"Tokenized vCard to be parsed must be supplied\"\n      );\n    else if (!Array.isArray(tokenizedVcard))\n      throw new TypeError(\"Tokenized vCard to be parsed must be an array\");\n\n    const relevantPropCount = new Map([\n      [\"BEGIN\", 0],\n      [\"VERSION\", 0],\n      [\"END\", 0],\n      [\"FN\", 0],\n      [\"ANNIVERSARY\", 0],\n      [\"BDAY\", 0],\n      [\"GENDER\", 0],\n      [\"BIRTHPLACE\", 0],\n      [\"DEATHPLACE\", 0],\n      [\"DEATHDATE\", 0],\n      [\"KIND\", 0],\n      [\"N\", 0],\n      [\"PRODID\", 0],\n      [\"REV\", 0],\n      [\"UID\", 0],\n    ]);\n\n    for (const token of tokenizedVcard) {\n      let count = 0;\n      if (relevantPropCount.has(token.property)) {\n        count = relevantPropCount.get(token.property);\n        count++;\n        relevantPropCount.set(token.property, count);\n      }\n\n      if (\n        !this.constructor.knownProperties.has(token.property) &&\n        !token.property.startsWith(\"X-\")\n      )\n        throw new InvalidVcard(`vCard has unknown property: ${token.property}`);\n      else if (token.property === \"VERSION\" && token.value !== \"4.0\")\n        throw new InvalidArgument(`Unsupported vCard version: ${token.value}`);\n\n      for (const parameter of Object.keys(token.parameters)) {\n        if (\n          !this.constructor.knownParameters.has(parameter) &&\n          !parameter.startsWith(\"X-\")\n        )\n          throw new InvalidVcard(\n            `vCard has unknown parameter: ${parameter}, on ${token.property} property`\n          );\n      }\n    }\n\n    for (const prop of relevantPropCount.keys()) {\n      switch (prop) {\n        case \"BEGIN\":\n        case \"VERSION\":\n        case \"END\":\n          if (relevantPropCount.get(prop) !== 1)\n            throw new InvalidVcard(\n              \"vCard must have one of each BEGIN, VERSION and END properties\"\n            );\n          break;\n\n        case \"FN\":\n          if (relevantPropCount.get(prop) < 1)\n            throw new InvalidVcard(\"vCard must have at least one FN property\");\n          break;\n\n        default:\n          if (relevantPropCount.get(prop) > 1) {\n            const offendingTokens = tokenizedVcard.filter(\n              (token) => token.property === prop\n            );\n\n            if (\n              !offendingTokens.every((token) =>\n                token.parameters.hasOwnProperty(\"ALTID\")\n              ) ||\n              offendingTokens.some(\n                (token) =>\n                  token.parameters[\"ALTID\"] !==\n                  offendingTokens[0].parameters[\"ALTID\"]\n              )\n            )\n              throw new InvalidVcard(\n                \"vCard must not have more than one ANNIVERSARY, BDAY, GENDER, BIRTHPLACE, DEATHPLACE, DEATHDATE, KIND, N, PRODID, REV or UID property, unless they have the same ALTID parameter\"\n              );\n          }\n      }\n    }\n  }\n\n  #removeUnnecessaryFields(tokenizedVcard) {\n    return tokenizedVcard.filter(\n      (token) =>\n        token.property !== \"BEGIN\" &&\n        token.property !== \"VERSION\" &&\n        token.property !== \"END\"\n    );\n  }\n\n  #parseToken(token) {\n    let _parsedToken;\n\n    switch (token.property) {\n      case \"N\":\n        _parsedToken = { ...token };\n        _parsedToken[\"value\"] = {\n          familyNames: token.value[0],\n          givenNames: token.value[1],\n          additionalNames: token.value[2],\n          honorificPrefixes: token.value[3],\n          honorificSuffixes: token.value[4],\n        };\n        return _parsedToken;\n\n      case \"ADR\":\n        _parsedToken = { ...token };\n        _parsedToken[\"value\"] = {\n          postOfficeBox: token.value[0],\n          extendedAddress: token.value[1],\n          streetAddress: token.value[2],\n          locality: token.value[3],\n          region: token.value[4],\n          postalCode: token.value[5],\n          countryName: token.value[6],\n        };\n        return _parsedToken;\n\n      case \"GENDER\":\n        _parsedToken = { ...token };\n        if (Array.isArray(token.value))\n          _parsedToken[\"value\"] = {\n            sex: token.value[0],\n            gender: token.value[1],\n          };\n        else\n          _parsedToken[\"value\"] = {\n            sex: token.value,\n            gender: \"\",\n          };\n        return _parsedToken;\n    }\n\n    return token;\n  }\n\n  get parsed() {\n    const _parsedTokens = [];\n    for (const token of this.#tokenizedVcard)\n      _parsedTokens.push(this.#parseToken(token));\n\n    return {\n      parsedVcard: _parsedTokens,\n      get properties() {\n        return Array.from(\n          new Set(\n            _parsedTokens.reduce((accumulated, current) => {\n              accumulated.push(current.property);\n              return accumulated;\n            }, [])\n          )\n        );\n      },\n      get propertiesWithoutParameters() {\n        return Array.from(\n          new Set(\n            _parsedTokens.reduce((accumulated, current) => {\n              if (Object.keys(current.parameters).length === 0)\n                accumulated.push(current.property);\n              return accumulated;\n            }, [])\n          )\n        );\n      },\n      get propertiesWithParameters() {\n        return Array.from(\n          new Set(\n            _parsedTokens.reduce((accumulated, current) => {\n              if (Object.keys(current.parameters).length > 0)\n                accumulated.push(current.property);\n              return accumulated;\n            }, [])\n          )\n        );\n      },\n      getProperty(property = \"\") {\n        return _parsedTokens.filter(\n          (parsedToken) => parsedToken.property === property\n        );\n      },\n      get groups() {\n        return Array.from(\n          new Set(\n            _parsedTokens.reduce((accumulated, current) => {\n              current.group && accumulated.push(current.group);\n              return accumulated;\n            }, [])\n          )\n        );\n      },\n      getGroup(group = \"\") {\n        return _parsedTokens.filter(\n          (parsedToken) => parsedToken.group === group\n        );\n      },\n      get repeatingProperties() {\n        const _repeatingProperties = {};\n        const propertiesCount = new Map();\n\n        _parsedTokens.forEach((parsedToken) => {\n          if (propertiesCount.has(parsedToken.property)) {\n            let count = propertiesCount.get(parsedToken.property);\n            count++;\n            propertiesCount.set(parsedToken.property, count);\n          } else propertiesCount.set(parsedToken.property, 1);\n        });\n\n        for (const property of propertiesCount.keys()) {\n          const count = propertiesCount.get(property);\n          if (count > 1) _repeatingProperties[property] = count;\n        }\n\n        return _repeatingProperties;\n      },\n    };\n  }\n\n  constructor(tokenizedVcard) {\n    this.#validateTokenizedVcard(tokenizedVcard);\n    this.#tokenizedVcard = this.#removeUnnecessaryFields(tokenizedVcard);\n\n    Object.freeze(this);\n  }\n}\n\nObject.freeze(Parser);\n"],"names":["Parser","tokenizedVcard","Object","freeze","_parsedTokens","token","push","parsedVcard","properties","Array","from","Set","reduce","accumulated","current","property","propertiesWithoutParameters","keys","parameters","length","propertiesWithParameters","getProperty","filter","parsedToken","groups","group","getGroup","repeatingProperties","_repeatingProperties","propertiesCount","Map","forEach","has","count","get","set","MissingArgument","isArray","TypeError","relevantPropCount","constructor","knownProperties","startsWith","InvalidVcard","value","InvalidArgument","parameter","knownParameters","prop","offendingTokens","every","hasOwnProperty","some","_parsedToken","_objectSpread","familyNames","givenNames","additionalNames","honorificPrefixes","honorificSuffixes","postOfficeBox","extendedAddress","streetAddress","locality","region","postalCode","countryName","sex","gender"],"mappings":"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"}