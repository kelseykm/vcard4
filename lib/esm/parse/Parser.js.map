{"version":3,"file":"Parser.js","sources":["../../../src/parse/Parser.js"],"sourcesContent":["import {\r\n  MissingArgument,\r\n  InvalidArgument,\r\n  InvalidVcard,\r\n} from \"../errors/index.js\";\r\n\r\nexport class Parser {\r\n  static identifier = \"Parser\";\r\n  static knownProperties = new Set([\r\n    \"BEGIN\",\r\n    \"VERSION\",\r\n    \"END\",\r\n    \"SOURCE\",\r\n    \"KIND\",\r\n    \"XML\",\r\n    \"FN\",\r\n    \"N\",\r\n    \"NICKNAME\",\r\n    \"PHOTO\",\r\n    \"BDAY\",\r\n    \"ANNIVERSARY\",\r\n    \"GENDER\",\r\n    \"BIRTHPLACE\",\r\n    \"DEATHPLACE\",\r\n    \"DEATHDATE\",\r\n    \"EXPERTISE\",\r\n    \"HOBBY\",\r\n    \"INTEREST\",\r\n    \"ADR\",\r\n    \"TEL\",\r\n    \"EMAIL\",\r\n    \"IMPP\",\r\n    \"LANG\",\r\n    \"CONTACT-URI\",\r\n    \"TZ\",\r\n    \"GEO\",\r\n    \"TITLE\",\r\n    \"ROLE\",\r\n    \"LOGO\",\r\n    \"ORG\",\r\n    \"MEMBER\",\r\n    \"RELATED\",\r\n    \"ORG-DIRECTORY\",\r\n    \"CATEGORIES\",\r\n    \"NOTE\",\r\n    \"PRODID\",\r\n    \"REV\",\r\n    \"SOUND\",\r\n    \"UID\",\r\n    \"CLIENTPIDMAP\",\r\n    \"URL\",\r\n    \"KEY\",\r\n    \"FBURL\",\r\n    \"CALADRURI\",\r\n    \"CALURI\",\r\n  ]);\r\n  static knownParameters = new Set([\r\n    \"LANGUAGE\",\r\n    \"VALUE\",\r\n    \"PREF\",\r\n    \"ALTID\",\r\n    \"PID\",\r\n    \"TYPE\",\r\n    \"MEDIATYPE\",\r\n    \"CALSCALE\",\r\n    \"SORTAS\",\r\n    \"GEO\",\r\n    \"TZ\",\r\n    \"LABEL\",\r\n    \"CC\",\r\n    \"INDEX\",\r\n    \"LEVEL\",\r\n  ]);\r\n\r\n  #tokenizedVcard;\r\n\r\n  #validateTokenizedVcard(tokenizedVcard) {\r\n    if (typeof tokenizedVcard === \"undefined\")\r\n      throw new MissingArgument(\r\n        \"Tokenized vCard to be parsed must be supplied\"\r\n      );\r\n    else if (!Array.isArray(tokenizedVcard))\r\n      throw new TypeError(\"Tokenized vCard to be parsed must be an array\");\r\n\r\n    const relevantPropCount = new Map([\r\n      [\"BEGIN\", 0],\r\n      [\"VERSION\", 0],\r\n      [\"END\", 0],\r\n      [\"FN\", 0],\r\n      [\"ANNIVERSARY\", 0],\r\n      [\"BDAY\", 0],\r\n      [\"GENDER\", 0],\r\n      [\"BIRTHPLACE\", 0],\r\n      [\"DEATHPLACE\", 0],\r\n      [\"DEATHDATE\", 0],\r\n      [\"KIND\", 0],\r\n      [\"N\", 0],\r\n      [\"PRODID\", 0],\r\n      [\"REV\", 0],\r\n      [\"UID\", 0],\r\n    ]);\r\n\r\n    for (const token of tokenizedVcard) {\r\n      let count = 0;\r\n      if (relevantPropCount.has(token.property)) {\r\n        count = relevantPropCount.get(token.property);\r\n        count++;\r\n        relevantPropCount.set(token.property, count);\r\n      }\r\n\r\n      if (\r\n        !this.constructor.knownProperties.has(token.property) &&\r\n        !token.property.startsWith(\"X-\")\r\n      )\r\n        throw new InvalidVcard(`vCard has unknown property: ${token.property}`);\r\n      else if (token.property === \"VERSION\" && token.value !== \"4.0\")\r\n        throw new InvalidArgument(`Unsupported vCard version: ${token.value}`);\r\n\r\n      for (const parameter of Object.keys(token.parameters)) {\r\n        if (\r\n          !this.constructor.knownParameters.has(parameter) &&\r\n          !parameter.startsWith(\"X-\")\r\n        )\r\n          throw new InvalidVcard(\r\n            `vCard has unknown parameter: ${parameter}, on ${token.property} property`\r\n          );\r\n      }\r\n    }\r\n\r\n    for (const prop of relevantPropCount.keys()) {\r\n      switch (prop) {\r\n        case \"BEGIN\":\r\n        case \"VERSION\":\r\n        case \"END\":\r\n          if (relevantPropCount.get(prop) !== 1)\r\n            throw new InvalidVcard(\r\n              \"vCard must have one of each BEGIN, VERSION and END properties\"\r\n            );\r\n          break;\r\n\r\n        case \"FN\":\r\n          if (relevantPropCount.get(prop) < 1)\r\n            throw new InvalidVcard(\"vCard must have at least one FN property\");\r\n          break;\r\n\r\n        default:\r\n          if (relevantPropCount.get(prop) > 1) {\r\n            const offendingTokens = tokenizedVcard.filter(\r\n              (token) => token.property === prop\r\n            );\r\n\r\n            if (\r\n              !offendingTokens.every((token) =>\r\n                token.parameters.hasOwnProperty(\"ALTID\")\r\n              ) ||\r\n              offendingTokens.some(\r\n                (token) =>\r\n                  token.parameters[\"ALTID\"] !==\r\n                  offendingTokens[0].parameters[\"ALTID\"]\r\n              )\r\n            )\r\n              throw new InvalidVcard(\r\n                \"vCard must not have more than one ANNIVERSARY, BDAY, GENDER, BIRTHPLACE, DEATHPLACE, DEATHDATE, KIND, N, PRODID, REV or UID property, unless they have the same ALTID parameter\"\r\n              );\r\n          }\r\n      }\r\n    }\r\n  }\r\n\r\n  #removeUnnecessaryFields(tokenizedVcard) {\r\n    return tokenizedVcard.filter(\r\n      (token) =>\r\n        token.property !== \"BEGIN\" &&\r\n        token.property !== \"VERSION\" &&\r\n        token.property !== \"END\"\r\n    );\r\n  }\r\n\r\n  #parseToken(token) {\r\n    let _parsedToken;\r\n\r\n    switch (token.property) {\r\n      case \"N\":\r\n        _parsedToken = { ...token };\r\n        _parsedToken[\"value\"] = {\r\n          familyNames: token.value[0],\r\n          givenNames: token.value[1],\r\n          additionalNames: token.value[2],\r\n          honorificPrefixes: token.value[3],\r\n          honorificSuffixes: token.value[4],\r\n        };\r\n        return _parsedToken;\r\n\r\n      case \"ADR\":\r\n        _parsedToken = { ...token };\r\n        _parsedToken[\"value\"] = {\r\n          postOfficeBox: token.value[0],\r\n          extendedAddress: token.value[1],\r\n          streetAddress: token.value[2],\r\n          locality: token.value[3],\r\n          region: token.value[4],\r\n          postalCode: token.value[5],\r\n          countryName: token.value[6],\r\n        };\r\n        return _parsedToken;\r\n\r\n      case \"GENDER\":\r\n        _parsedToken = { ...token };\r\n        if (Array.isArray(token.value))\r\n          _parsedToken[\"value\"] = {\r\n            sex: token.value[0],\r\n            gender: token.value[1],\r\n          };\r\n        else\r\n          _parsedToken[\"value\"] = {\r\n            sex: token.value,\r\n            gender: \"\",\r\n          };\r\n        return _parsedToken;\r\n    }\r\n\r\n    return token;\r\n  }\r\n\r\n  get parsed() {\r\n    const _parsedTokens = [];\r\n    for (const token of this.#tokenizedVcard)\r\n      _parsedTokens.push(this.#parseToken(token));\r\n\r\n    return {\r\n      parsedVcard: _parsedTokens,\r\n      get properties() {\r\n        return Array.from(\r\n          new Set(\r\n            _parsedTokens.reduce((accumulated, current) => {\r\n              accumulated.push(current.property);\r\n              return accumulated;\r\n            }, [])\r\n          )\r\n        );\r\n      },\r\n      get propertiesWithoutParameters() {\r\n        return Array.from(\r\n          new Set(\r\n            _parsedTokens.reduce((accumulated, current) => {\r\n              if (Object.keys(current.parameters).length === 0)\r\n                accumulated.push(current.property);\r\n              return accumulated;\r\n            }, [])\r\n          )\r\n        );\r\n      },\r\n      get propertiesWithParameters() {\r\n        return Array.from(\r\n          new Set(\r\n            _parsedTokens.reduce((accumulated, current) => {\r\n              if (Object.keys(current.parameters).length > 0)\r\n                accumulated.push(current.property);\r\n              return accumulated;\r\n            }, [])\r\n          )\r\n        );\r\n      },\r\n      getProperty(property = \"\") {\r\n        return _parsedTokens.filter((parsedToken) =>\r\n          new RegExp(`^${property}$`, \"i\").test(parsedToken.property)\r\n        );\r\n      },\r\n      get groups() {\r\n        return Array.from(\r\n          new Set(\r\n            _parsedTokens.reduce((accumulated, current) => {\r\n              current.group && accumulated.push(current.group);\r\n              return accumulated;\r\n            }, [])\r\n          )\r\n        );\r\n      },\r\n      getGroup(group = \"\") {\r\n        return _parsedTokens.filter((parsedToken) =>\r\n          new RegExp(`^${group}$`, \"i\").test(parsedToken.group)\r\n        );\r\n      },\r\n      get repeatingProperties() {\r\n        const _repeatingProperties = {};\r\n        const propertiesCount = new Map();\r\n\r\n        _parsedTokens.forEach((parsedToken) => {\r\n          if (propertiesCount.has(parsedToken.property)) {\r\n            let count = propertiesCount.get(parsedToken.property);\r\n            count++;\r\n            propertiesCount.set(parsedToken.property, count);\r\n          } else propertiesCount.set(parsedToken.property, 1);\r\n        });\r\n\r\n        for (const property of propertiesCount.keys()) {\r\n          const count = propertiesCount.get(property);\r\n          if (count > 1) _repeatingProperties[property] = count;\r\n        }\r\n\r\n        return _repeatingProperties;\r\n      },\r\n    };\r\n  }\r\n\r\n  constructor(tokenizedVcard) {\r\n    this.#validateTokenizedVcard(tokenizedVcard);\r\n    this.#tokenizedVcard = this.#removeUnnecessaryFields(tokenizedVcard);\r\n\r\n    Object.freeze(this);\r\n  }\r\n}\r\n\r\nObject.freeze(Parser);\r\n"],"names":["_tokenizedVcard","WeakMap","_Parser_brand","WeakSet","Parser","tokenizedVcard","_classCallCheck","_classPrivateMethodInitSpec","_classPrivateFieldInitSpec","_assertClassBrand","_validateTokenizedVcard","call","_classPrivateFieldSet","_removeUnnecessaryFields","Object","freeze","_createClass","key","get","_parsedTokens","_iterator","_createForOfIteratorHelper","_classPrivateFieldGet","_step","s","n","done","token","value","push","_parseToken","err","e","f","parsedVcard","properties","Array","from","Set","reduce","accumulated","current","property","propertiesWithoutParameters","keys","parameters","length","propertiesWithParameters","getProperty","arguments","undefined","filter","parsedToken","RegExp","concat","test","groups","group","getGroup","repeatingProperties","_repeatingProperties","propertiesCount","Map","forEach","has","count","set","_iterator2","_step2","MissingArgument","isArray","TypeError","relevantPropCount","_iterator3","_step3","constructor","knownProperties","startsWith","InvalidVcard","InvalidArgument","_i","_Object$keys","parameter","knownParameters","_iterator4","_step4","_loop","prop","offendingTokens","every","hasOwnProperty","some","_parsedToken","_objectSpread","familyNames","givenNames","additionalNames","honorificPrefixes","honorificSuffixes","postOfficeBox","extendedAddress","streetAddress","locality","region","postalCode","countryName","sex","gender","_defineProperty"],"mappings":"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"}