{"version":3,"file":"Tokenizer.js","sources":["../../../src/parse/Tokenizer.js"],"sourcesContent":["import {\r\n  MissingArgument,\r\n  InvalidArgument,\r\n  InvalidVcard,\r\n} from \"../errors/index.js\";\r\n\r\nexport class Tokenizer {\r\n  static identifier = \"Tokenizer\";\r\n\r\n  #_unfoldedVcard;\r\n\r\n  //Credit for the following regex goes to Jonas Hermsmeier, who got it from Jeff Roberson and added capture groups\r\n  #uriRegExp = new RegExp(\r\n    \"([A-Za-z][A-Za-z0-9+\\\\-.]*):(?:(//)(?:((?:[A-Za-z0-9\\\\-._~!$&'()*+,;=:]|%[0-9A-Fa-f]{2})*)@)?((?:\\\\[(?:(?:(?:(?:[0-9A-Fa-f]{1,4}:){6}|::(?:[0-9A-Fa-f]{1,4}:){5}|(?:[0-9A-Fa-f]{1,4})?::(?:[0-9A-Fa-f]{1,4}:){4}|(?:(?:[0-9A-Fa-f]{1,4}:){0,1}[0-9A-Fa-f]{1,4})?::(?:[0-9A-Fa-f]{1,4}:){3}|(?:(?:[0-9A-Fa-f]{1,4}:){0,2}[0-9A-Fa-f]{1,4})?::(?:[0-9A-Fa-f]{1,4}:){2}|(?:(?:[0-9A-Fa-f]{1,4}:){0,3}[0-9A-Fa-f]{1,4})?::[0-9A-Fa-f]{1,4}:|(?:(?:[0-9A-Fa-f]{1,4}:){0,4}[0-9A-Fa-f]{1,4})?::)(?:[0-9A-Fa-f]{1,4}:[0-9A-Fa-f]{1,4}|(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))|(?:(?:[0-9A-Fa-f]{1,4}:){0,5}[0-9A-Fa-f]{1,4})?::[0-9A-Fa-f]{1,4}|(?:(?:[0-9A-Fa-f]{1,4}:){0,6}[0-9A-Fa-f]{1,4})?::)|[Vv][0-9A-Fa-f]+\\\\.[A-Za-z0-9\\\\-._~!$&'()*+,;=:]+)\\\\]|(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)|(?:[A-Za-z0-9\\\\-._~!$&'()*+,;=]|%[0-9A-Fa-f]{2})*))(?::([0-9]*))?((?:/(?:[A-Za-z0-9\\\\-._~!$&'()*+,;=:@]|%[0-9A-Fa-f]{2})*)*)|/((?:(?:[A-Za-z0-9\\\\-._~!$&'()*+,;=:@]|%[0-9A-Fa-f]{2})+(?:/(?:[A-Za-z0-9\\\\-._~!$&'()*+,;=:@]|%[0-9A-Fa-f]{2})*)*)?)|((?:[A-Za-z0-9\\\\-._~!$&'()*+,;=:@]|%[0-9A-Fa-f]{2})+(?:/(?:[A-Za-z0-9\\\\-._~!$&'()*+,;=:@]|%[0-9A-Fa-f]{2})*)*)|)(?:\\\\?((?:[A-Za-z0-9\\\\-._~!$&'()*+,;=:@/?]|%[0-9A-Fa-f]{2})*))?(?:\\\\#((?:[A-Za-z0-9\\\\-._~!$&'()*+,;=:@/?]|%[0-9A-Fa-f]{2})*))?\"\r\n  );\r\n\r\n  get numberOfVcards() {\r\n    return (this.#_unfoldedVcard.match(/BEGIN:VCARD\\r\\n/gi) ?? []).length || 1;\r\n  }\r\n\r\n  #backCount(chr, str) {\r\n    if (typeof chr === \"undefined\" || typeof str === \"undefined\")\r\n      throw new MissingArgument(\r\n        \"Character and string for this.#backCount must be supplied\"\r\n      );\r\n\r\n    if (typeof chr !== \"string\" || typeof str !== \"string\")\r\n      throw new InvalidArgument(\r\n        \"Character and string for this.#backCount must be of type string\"\r\n      );\r\n\r\n    let count = 0;\r\n\r\n    for (let index = str.length - 1; index >= 0; index--) {\r\n      if (str[index] === chr) count++;\r\n      else break;\r\n    }\r\n\r\n    return count;\r\n  }\r\n\r\n  #separateVcardContentLines() {\r\n    if (this.numberOfVcards === 1)\r\n      return this.#_unfoldedVcard.split(\"\\r\\n\").filter((vcard) => vcard !== \"\");\r\n\r\n    return this.#_unfoldedVcard\r\n      .split(/BEGIN:VCARD\\r\\n/gi)\r\n      .filter((vcard) => vcard !== \"\")\r\n      .map((vcard) =>\r\n        (\"BEGIN:VCARD\\r\\n\" + vcard)\r\n          .split(\"\\r\\n\")\r\n          .filter((vcard) => vcard !== \"\")\r\n      );\r\n  }\r\n\r\n  #valueSeparator(value) {\r\n    if (value.startsWith('\"') && value.endsWith('\"'))\r\n      value = value.slice(1, -1);\r\n\r\n    if (this.#uriRegExp.test(value)) return value;\r\n\r\n    const quotedValues = [];\r\n    let quotedValueIndex = 0;\r\n    for (let index = 0; index < value.length; index++) {\r\n      if (value[index] === '\"') {\r\n        const backslashCount = this.#backCount(\"\\\\\", value.slice(0, index));\r\n\r\n        if (backslashCount % 2 !== 0) continue;\r\n\r\n        if (typeof quotedValues[quotedValueIndex] !== \"object\")\r\n          quotedValues[quotedValueIndex] = {\r\n            start: index,\r\n          };\r\n        else if (typeof quotedValues[quotedValueIndex] === \"object\") {\r\n          quotedValues[quotedValueIndex][\"stop\"] = index;\r\n          quotedValueIndex++;\r\n        }\r\n      }\r\n    }\r\n\r\n    let parsedValue = [];\r\n\r\n    let continueFrom = 0;\r\n    for (let index = 0; index < value.length; index++) {\r\n      if (value[index] === \";\") {\r\n        if (\r\n          quotedValues.some((quotedValue) => {\r\n            return index > quotedValue.start && index < quotedValue.stop;\r\n          })\r\n        )\r\n          continue;\r\n\r\n        const backslashCount = this.#backCount(\r\n          \"\\\\\",\r\n          value.substring(continueFrom, index)\r\n        );\r\n        if (backslashCount % 2 !== 0) continue;\r\n\r\n        parsedValue.push(value.substring(continueFrom, index));\r\n        continueFrom = index + 1;\r\n      }\r\n\r\n      if (index === value.length - 1)\r\n        parsedValue.push(value.substring(continueFrom));\r\n    }\r\n\r\n    for (let index = 0; index < parsedValue.length; index++) {\r\n      const component = parsedValue[index];\r\n\r\n      const quotedComponents = [];\r\n      let quotedComponentIndex = 0;\r\n      for (let index = 0; index < component.length; index++) {\r\n        if (component[index] === '\"') {\r\n          const backslashCount = this.#backCount(\r\n            \"\\\\\",\r\n            component.slice(0, index)\r\n          );\r\n\r\n          if (backslashCount % 2 !== 0) continue;\r\n\r\n          if (typeof quotedComponents[quotedComponentIndex] !== \"object\")\r\n            quotedComponents[quotedComponentIndex] = {\r\n              start: index,\r\n            };\r\n          else if (typeof quotedComponents[quotedComponentIndex] === \"object\") {\r\n            quotedComponents[quotedComponentIndex][\"stop\"] = index;\r\n            quotedComponentIndex++;\r\n          }\r\n        }\r\n      }\r\n\r\n      const holdParsedComponent = [];\r\n      let continueFrom = 0;\r\n      for (let index2 = 0; index2 < component.length; index2++) {\r\n        if (component[index2] === \",\") {\r\n          if (\r\n            quotedComponents.some((quotedComponent) => {\r\n              return (\r\n                index2 > quotedComponent.start && index2 < quotedComponent.stop\r\n              );\r\n            })\r\n          )\r\n            continue;\r\n\r\n          const backslashCount = this.#backCount(\r\n            \"\\\\\",\r\n            component.substring(continueFrom, index2)\r\n          );\r\n          if (backslashCount % 2 !== 0) continue;\r\n\r\n          holdParsedComponent.push(component.substring(continueFrom, index2));\r\n          continueFrom = index2 + 1;\r\n        }\r\n\r\n        if (index2 === component.length - 1)\r\n          holdParsedComponent.push(component.substring(continueFrom));\r\n      }\r\n\r\n      if (holdParsedComponent.length > 1)\r\n        parsedValue[index] = holdParsedComponent;\r\n    }\r\n\r\n    parsedValue = parsedValue.map((val) => {\r\n      if (!Array.isArray(val))\r\n        return val\r\n          .replaceAll(\"\\\\n\", \"\\n\")\r\n          .replaceAll(\"\\\\;\", \";\")\r\n          .replaceAll(\"\\\\:\", \":\")\r\n          .replaceAll(\"\\\\,\", \",\")\r\n          .replaceAll(\"\\\\\\\\\", \"\\\\\");\r\n\r\n      return val.map((innerVal) =>\r\n        innerVal\r\n          .replaceAll(\"\\\\n\", \"\\n\")\r\n          .replaceAll(\"\\\\;\", \";\")\r\n          .replaceAll(\"\\\\:\", \":\")\r\n          .replaceAll(\"\\\\,\", \",\")\r\n          .replaceAll(\"\\\\\\\\\", \"\\\\\")\r\n      );\r\n    });\r\n\r\n    return parsedValue.length > 1 ? parsedValue : parsedValue[0];\r\n  }\r\n\r\n  #parametersSeparator(params) {\r\n    const paramList = [];\r\n\r\n    const quotedParams = [];\r\n    let quotedParamIndex = 0;\r\n    for (let index = 0; index < params.length; index++) {\r\n      if (params[index] === '\"') {\r\n        const backslashCount = this.#backCount(\"\\\\\", params.slice(0, index));\r\n\r\n        if (backslashCount % 2 !== 0) continue;\r\n\r\n        if (typeof quotedParams[quotedParamIndex] !== \"object\")\r\n          quotedParams[quotedParamIndex] = {\r\n            start: index,\r\n          };\r\n        else if (typeof quotedParams[quotedParamIndex] === \"object\") {\r\n          quotedParams[quotedParamIndex][\"stop\"] = index;\r\n          quotedParamIndex++;\r\n        }\r\n      }\r\n    }\r\n\r\n    let continueFrom = 0;\r\n    for (let index = 0; index < params.length; index++) {\r\n      if (params[index] === \";\") {\r\n        if (\r\n          quotedParams.some((quotedParam) => {\r\n            return index > quotedParam.start && index < quotedParam.stop;\r\n          })\r\n        )\r\n          continue;\r\n\r\n        const backslashCount = this.#backCount(\r\n          \"\\\\\",\r\n          params.substring(continueFrom, index)\r\n        );\r\n        if (backslashCount % 2 !== 0) continue;\r\n\r\n        paramList.push(params.substring(continueFrom, index));\r\n        continueFrom = index + 1;\r\n      }\r\n\r\n      if (index === params.length - 1)\r\n        paramList.push(params.substring(continueFrom));\r\n    }\r\n\r\n    const refParamList = [...paramList];\r\n    for (let index = 0; index < paramList.length; index++) {\r\n      const joinedParam = paramList[index];\r\n\r\n      const holdJoinedParam = [];\r\n      let continueFrom = 0;\r\n      for (let index2 = 0; index2 < joinedParam.length; index2++) {\r\n        if (joinedParam[index2] === \"=\") {\r\n          const actualIndex = index\r\n            ? (() => {\r\n                let count = 0;\r\n\r\n                for (let index3 = 0; index3 < index; index3++) {\r\n                  count += refParamList[index3][\"length\"];\r\n                  count++; //for removed semicolon\r\n                }\r\n\r\n                count += index2;\r\n\r\n                return count;\r\n              })()\r\n            : index2;\r\n          if (\r\n            quotedParams.some((quotedParam) => {\r\n              return (\r\n                actualIndex > quotedParam.start &&\r\n                actualIndex < quotedParam.stop\r\n              );\r\n            })\r\n          )\r\n            continue;\r\n\r\n          const backslashCount = this.#backCount(\r\n            \"\\\\\",\r\n            joinedParam.substring(continueFrom, index2)\r\n          );\r\n          if (backslashCount % 2 !== 0) continue;\r\n\r\n          holdJoinedParam.push(joinedParam.substring(continueFrom, index2));\r\n          continueFrom = index2 + 1;\r\n        }\r\n\r\n        if (index2 === joinedParam.length - 1)\r\n          holdJoinedParam.push(joinedParam.substring(continueFrom));\r\n      }\r\n\r\n      const parsedParam = {};\r\n      for (let index = 0; index < holdJoinedParam.length; index++) {\r\n        if (index % 2 === 0)\r\n          parsedParam[holdJoinedParam[index]] = holdJoinedParam[index + 1];\r\n        else continue;\r\n      }\r\n\r\n      paramList[index] = parsedParam;\r\n    }\r\n\r\n    for (let index = 0; index < paramList.length; index++) {\r\n      const currentParam = paramList[index];\r\n      const currentParamKey = Object.keys(currentParam).pop();\r\n      const currentParamValue = Object.values(currentParam).pop();\r\n\r\n      let holdCurrentParamValue = \"\";\r\n      let continueFrom = 0;\r\n      for (let index2 = 0; index2 < currentParamValue.length; index2++) {\r\n        if (currentParamValue[index2] === \"^\") {\r\n          const circumflexCount = this.#backCount(\r\n            \"^\",\r\n            currentParamValue.substring(continueFrom, index2)\r\n          );\r\n\r\n          if (circumflexCount % 2 !== 0) {\r\n            holdCurrentParamValue += currentParamValue[index2];\r\n          } else {\r\n            switch (true) {\r\n              case currentParamValue[index2 + 1] === \"n\":\r\n                holdCurrentParamValue += \"\\n\";\r\n                index2++;\r\n                break;\r\n              case currentParamValue[index2 + 1] === \"’\":\r\n                holdCurrentParamValue += '\"';\r\n                index2++;\r\n                break;\r\n              case currentParamValue[index2 + 1] === \"^\":\r\n                holdCurrentParamValue += \"^\";\r\n                index2++;\r\n                break;\r\n            }\r\n          }\r\n        } else {\r\n          holdCurrentParamValue += currentParamValue[index2];\r\n        }\r\n        continueFrom = index2 + 1;\r\n      }\r\n\r\n      if (\r\n        holdCurrentParamValue.startsWith('\"') &&\r\n        holdCurrentParamValue.endsWith('\"') &&\r\n        !this.#uriRegExp.test(holdCurrentParamValue.slice(1, -1))\r\n      )\r\n        holdCurrentParamValue = this.#valueSeparator(\r\n          holdCurrentParamValue.slice(1, -1)\r\n        );\r\n      else if (\r\n        holdCurrentParamValue.startsWith('\"') &&\r\n        holdCurrentParamValue.endsWith('\"')\r\n      )\r\n        holdCurrentParamValue = holdCurrentParamValue.slice(1, -1);\r\n\r\n      if (Array.isArray(holdCurrentParamValue))\r\n        holdCurrentParamValue = holdCurrentParamValue.map((val) =>\r\n          val\r\n            .replaceAll(\"\\\\n\", \"\\n\")\r\n            .replaceAll(\"\\\\;\", \";\")\r\n            .replaceAll(\"\\\\:\", \":\")\r\n            .replaceAll(\"\\\\,\", \",\")\r\n            .replaceAll(\"\\\\\\\\\", \"\\\\\")\r\n        );\r\n      else\r\n        holdCurrentParamValue = holdCurrentParamValue\r\n          .replaceAll(\"\\\\n\", \"\\n\")\r\n          .replaceAll(\"\\\\;\", \";\")\r\n          .replaceAll(\"\\\\:\", \":\")\r\n          .replaceAll(\"\\\\,\", \",\")\r\n          .replaceAll(\"\\\\\\\\\", \"\\\\\");\r\n\r\n      currentParam[currentParamKey] = holdCurrentParamValue;\r\n    }\r\n\r\n    return paramList.reduce((accumulatedParams, currentParam) => {\r\n      const key = Object.keys(currentParam)[0].toUpperCase();\r\n      const value = Object.values(currentParam)[0];\r\n      accumulatedParams[key] = value;\r\n      return accumulatedParams;\r\n    }, {});\r\n  }\r\n\r\n  #contentLineTokenizer(contentLine) {\r\n    const firstSemiColonIndex = contentLine.indexOf(\";\");\r\n    let firstColonIndex = contentLine.indexOf(\":\");\r\n\r\n    const propEndPoint =\r\n      firstSemiColonIndex !== -1\r\n        ? firstColonIndex < firstSemiColonIndex\r\n          ? firstColonIndex\r\n          : firstSemiColonIndex\r\n        : firstColonIndex;\r\n\r\n    let property = contentLine.slice(0, propEndPoint);\r\n    let group = null;\r\n\r\n    if (property.indexOf(\".\") !== -1) {\r\n      [group, property] = property.split(\".\");\r\n    }\r\n\r\n    if (firstSemiColonIndex === -1 || firstColonIndex < firstSemiColonIndex)\r\n      return {\r\n        group,\r\n        property: property.toUpperCase(),\r\n        parameters: {},\r\n        value: this.#valueSeparator(contentLine.slice(propEndPoint + 1)),\r\n      };\r\n\r\n    const quotedParts = [];\r\n    let quotedPartsIndex = 0;\r\n    for (let index = 0; index < contentLine.length; index++) {\r\n      if (contentLine[index] === '\"') {\r\n        const backslashCount = this.#backCount(\r\n          \"\\\\\",\r\n          contentLine.slice(0, index)\r\n        );\r\n\r\n        if (backslashCount % 2 !== 0) continue;\r\n\r\n        if (typeof quotedParts[quotedPartsIndex] !== \"object\") {\r\n          quotedParts[quotedPartsIndex] = {\r\n            start: index,\r\n          };\r\n        } else {\r\n          quotedParts[quotedPartsIndex][\"stop\"] = index;\r\n          quotedPartsIndex++;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (\r\n      quotedParts.some(\r\n        (part) => part.start < firstColonIndex && part.stop > firstColonIndex\r\n      )\r\n    )\r\n      for (let index = firstColonIndex; index < contentLine.length; index++) {\r\n        if (contentLine[index] === \":\") {\r\n          if (\r\n            quotedParts.some((part) => part.start < index && part.stop > index)\r\n          )\r\n            continue;\r\n          else {\r\n            firstColonIndex = index;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n    return {\r\n      group,\r\n      property: property.toUpperCase(),\r\n      parameters: this.#parametersSeparator(\r\n        contentLine.slice(firstSemiColonIndex + 1, firstColonIndex)\r\n      ),\r\n      value: this.#valueSeparator(contentLine.slice(firstColonIndex + 1)),\r\n    };\r\n  }\r\n\r\n  #initialValidation(vcard) {\r\n    if (typeof vcard === \"undefined\")\r\n      throw new MissingArgument(\"vCard to be tokenized must be supplied\");\r\n    else if (typeof vcard !== \"string\")\r\n      throw new TypeError(\"vCard to be tokenized must be of type string\");\r\n\r\n    if ((vcard.match(/\\r\\n/g) ?? []).length < 4)\r\n      throw new InvalidVcard(\r\n        \"vCard content lines must be delimited by CRLF (\\\\r\\\\n) sequence\"\r\n      );\r\n  }\r\n\r\n  get tokens() {\r\n    const tokens = [];\r\n\r\n    if (this.numberOfVcards === 1) {\r\n      for (const contentLine of this.#separateVcardContentLines())\r\n        tokens.push(this.#contentLineTokenizer(contentLine));\r\n    } else {\r\n      for (const vcard of this.#separateVcardContentLines()) {\r\n        const _cardTokens = [];\r\n\r\n        for (const contentLine of vcard)\r\n          _cardTokens.push(this.#contentLineTokenizer(contentLine));\r\n\r\n        tokens.push(_cardTokens);\r\n      }\r\n    }\r\n\r\n    return tokens;\r\n  }\r\n\r\n  constructor(vcard) {\r\n    this.#initialValidation(vcard);\r\n    this.#_unfoldedVcard = vcard.replace(/\\r\\n[\\t ]/g, \"\"); //unfold\r\n\r\n    Object.freeze(this);\r\n  }\r\n}\r\n\r\nObject.freeze(Tokenizer);\r\n"],"names":["_unfoldedVcard","WeakMap","_uriRegExp","_Tokenizer_brand","WeakSet","Tokenizer","vcard","_classCallCheck","_classPrivateMethodInitSpec","_classPrivateFieldInitSpec","RegExp","_assertClassBrand","_initialValidation","call","_classPrivateFieldSet","replace","Object","freeze","_createClass","key","get","_classPrivateFieldGet2","_classPrivateFieldGet","match","length","tokens","numberOfVcards","_iterator","_createForOfIteratorHelper","_separateVcardContentLines","_step","s","n","done","contentLine","value","push","_contentLineTokenizer","err","e","f","_iterator2","_step2","_cardTokens","_iterator3","_step3","_backCount","chr","str","MissingArgument","InvalidArgument","count","index","split","filter","map","_valueSeparator","_this","startsWith","endsWith","slice","test","quotedValues","quotedValueIndex","backslashCount","_typeof","start","parsedValue","continueFrom","_loop","_index","some","quotedValue","stop","substring","_ret","component","quotedComponents","quotedComponentIndex","holdParsedComponent","_loop2","index2","quotedComponent","_ret2","val","Array","isArray","replaceAll","innerVal","_parametersSeparator","params","_this2","paramList","quotedParams","quotedParamIndex","_loop3","_index4","quotedParam","_ret3","refParamList","concat","_loop4","_index5","joinedParam","holdJoinedParam","_loop5","_index7","actualIndex","index3","_ret4","parsedParam","currentParam","currentParamKey","keys","pop","currentParamValue","values","holdCurrentParamValue","circumflexCount","reduce","accumulatedParams","toUpperCase","firstSemiColonIndex","indexOf","firstColonIndex","propEndPoint","property","group","_property$split","_property$split2","_slicedToArray","parameters","quotedParts","quotedPartsIndex","part","_loop6","_index9","_ret5","_vcard$match","TypeError","InvalidVcard","_defineProperty"],"mappings":"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"}