{"version":3,"file":"group.js","sources":["../../src/group.js"],"sourcesContent":["import { MissingArgument, InvalidArgument } from \"./errors/index.js\";\n\nexport class Group {\n  static identifier = \"Group\";\n  static cardinalityNoneOrOneProps = new Set([\n    \"AnniversaryProperty\",\n    \"BdayProperty\",\n    \"GenderProperty\",\n    \"BirthplaceProperty\",\n    \"DeathplaceProperty\",\n    \"DeathdateProperty\",\n    \"KindProperty\",\n    \"NProperty\",\n    \"ProdidProperty\",\n    \"RevProperty\",\n    \"UIDProperty\",\n  ]);\n\n  #props;\n  #groupName;\n\n  #propertyInstanceCount = new Map([\n    [\"FNProperty\", 0],\n    [\"AnniversaryProperty\", 0],\n    [\"BdayProperty\", 0],\n    [\"GenderProperty\", 0],\n    [\"BirthplaceProperty\", 0],\n    [\"DeathplaceProperty\", 0],\n    [\"DeathdateProperty\", 0],\n    [\"KindProperty\", 0],\n    [\"NProperty\", 0],\n    [\"ProdidProperty\", 0],\n    [\"RevProperty\", 0],\n    [\"UIDProperty\", 0],\n  ]);\n\n  get propertyInstanceCount() {\n    return this.#propertyInstanceCount;\n  }\n\n  hasMemberProperty = false;\n  kindPropertyIsGroup = false;\n\n  repr() {\n    const CRLF = \"\\r\\n\";\n\n    return this.#props\n      .reduce((accumulatedProps, currentProp) => {\n        accumulatedProps.push(`${this.#groupName}.${currentProp.repr()}`);\n        return accumulatedProps;\n      }, [])\n      .join(CRLF);\n  }\n\n  reprXML() {\n    let valueXML = \"\";\n    valueXML += `<group name=\"${this.#groupName}\">`;\n\n    valueXML += this.#props.reduce(\n      (accumulatedParameters, currentParameter) =>\n        accumulatedParameters + currentParameter.reprXML(),\n      \"\"\n    );\n\n    valueXML += \"</group>\";\n\n    return valueXML;\n  }\n\n  reprJSON() {\n    return this.#props.reduce((accumulatedProps, currentProp) => {\n      const prop = currentProp.reprJSON();\n      prop[1] = {\n        ...prop[1],\n        group: this.#groupName,\n      };\n\n      accumulatedProps.push(prop);\n      return accumulatedProps;\n    }, []);\n  }\n\n  #validate(props, groupName) {\n    if (\n      typeof props === \"undefined\" ||\n      typeof groupName === \"undefined\" ||\n      groupName === \"\"\n    )\n      throw new MissingArgument(\n        \"Properties to be grouped and the group name must be supplied\"\n      );\n    else if (!Array.isArray(props))\n      throw new InvalidArgument(\n        \"Properties for Group must be passed in an array\"\n      );\n    else if (!(props.length > 0))\n      throw new MissingArgument(\"Properties to be grouped must be supplied\");\n    else if (typeof groupName !== \"string\")\n      throw new TypeError(\"Group name must be of type string\");\n    else if (!/^[A-Za-z0-9-]+$/.test(groupName))\n      throw new InvalidArgument(\"Invalid group name\");\n\n    for (const prop of props) {\n      if (!/Property$/.test(prop.constructor.identifier))\n        throw new InvalidArgument(\n          \"Unidentified item included in properties to be grouped\"\n        );\n\n      switch (prop.constructor.identifier) {\n        case \"MemberProperty\":\n          this.hasMemberProperty = true;\n          break;\n\n        case \"KindProperty\":\n          if (/^group$/i.test(prop.value)) this.kindPropertyIsGroup = true;\n          break;\n\n        case \"Group\":\n          throw new InvalidArgument(\n            \"A group must not be included in the properties to be grouped\"\n          );\n      }\n\n      if (!this.#propertyInstanceCount.has(prop.constructor.identifier))\n        continue;\n\n      let count = this.#propertyInstanceCount.get(prop.constructor.identifier);\n      count++;\n      this.#propertyInstanceCount.set(prop.constructor.identifier, count);\n    }\n  }\n\n  constructor(props, groupName) {\n    this.#validate(props, groupName);\n    this.#props = props;\n    this.#groupName = groupName;\n\n    Object.freeze(this);\n  }\n}\n\nObject.freeze(Group);\n"],"names":["Group","props","groupName","Map","Object","freeze","CRLF","reduce","accumulatedProps","currentProp","push","repr","join","valueXML","accumulatedParameters","currentParameter","reprXML","prop","reprJSON","group","MissingArgument","Array","isArray","InvalidArgument","length","TypeError","test","constructor","identifier","hasMemberProperty","value","kindPropertyIsGroup","has","count","get","set","Set"],"mappings":"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"}