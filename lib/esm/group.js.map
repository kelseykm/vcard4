{"version":3,"file":"group.js","sources":["../../src/group.js"],"sourcesContent":["import { MissingArgument, InvalidArgument } from \"./errors/index.js\";\n\nexport class Group {\n  static identifier = \"Group\";\n  static cardinalityNoneOrOneProps = new Set([\n    \"AnniversaryProperty\",\n    \"BdayProperty\",\n    \"GenderProperty\",\n    \"BirthPlaceProperty\",\n    \"DeathPlaceProperty\",\n    \"DeathDateProperty\",\n    \"KindProperty\",\n    \"NProperty\",\n    \"ProdidProperty\",\n    \"RevProperty\",\n    \"UIDProperty\",\n  ]);\n\n  #props;\n  #groupName;\n\n  #propertyInstanceCount = new Map([\n    [\"FNProperty\", 0],\n    [\"AnniversaryProperty\", 0],\n    [\"BdayProperty\", 0],\n    [\"GenderProperty\", 0],\n    [\"BirthPlaceProperty\", 0],\n    [\"DeathPlaceProperty\", 0],\n    [\"DeathDateProperty\", 0],\n    [\"KindProperty\", 0],\n    [\"NProperty\", 0],\n    [\"ProdidProperty\", 0],\n    [\"RevProperty\", 0],\n    [\"UIDProperty\", 0],\n  ]);\n\n  get propertyInstanceCount() {\n    return this.#propertyInstanceCount;\n  }\n\n  get properties() {\n    return this.#props;\n  }\n\n  hasMemberProperty = false;\n  kindPropertyIsGroup = false;\n\n  repr() {\n    const CRLF = \"\\r\\n\";\n\n    return this.#props\n      .reduce((accumulatedProps, currentProp) => {\n        accumulatedProps.push(`${this.#groupName}.${currentProp.repr()}`);\n        return accumulatedProps;\n      }, [])\n      .join(CRLF);\n  }\n\n  reprXML() {\n    let valueXML = \"\";\n    valueXML += `<group name=\"${this.#groupName}\">`;\n\n    valueXML += this.#props.reduce(\n      (accumulatedParameters, currentParameter) =>\n        accumulatedParameters + currentParameter.reprXML(),\n      \"\"\n    );\n\n    valueXML += \"</group>\";\n\n    return valueXML;\n  }\n\n  reprJSON() {\n    return this.#props.reduce((accumulatedProps, currentProp) => {\n      const prop = currentProp.reprJSON();\n      prop[1] = {\n        ...prop[1],\n        group: this.#groupName,\n      };\n\n      accumulatedProps.push(prop);\n      return accumulatedProps;\n    }, []);\n  }\n\n  #validate(props, groupName) {\n    if (\n      typeof props === \"undefined\" ||\n      typeof groupName === \"undefined\" ||\n      groupName === \"\"\n    )\n      throw new MissingArgument(\n        \"Properties to be grouped and the group name must be supplied\"\n      );\n    else if (!Array.isArray(props))\n      throw new InvalidArgument(\n        \"Properties for Group must be passed in an array\"\n      );\n    else if (!(props.length > 0))\n      throw new MissingArgument(\"Properties to be grouped must be supplied\");\n    else if (typeof groupName !== \"string\")\n      throw new TypeError(\"Group name must be of type string\");\n    else if (!/^[A-Za-z0-9-]+$/.test(groupName))\n      throw new InvalidArgument(\"Invalid group name\");\n\n    for (const prop of props) {\n      if (!/Property$/.test(prop.constructor.identifier))\n        throw new InvalidArgument(\n          \"Unidentified item included in properties to be grouped\"\n        );\n\n      switch (prop.constructor.identifier) {\n        case \"MemberProperty\":\n          this.hasMemberProperty = true;\n          break;\n\n        case \"KindProperty\":\n          if (/^group$/i.test(prop.value)) this.kindPropertyIsGroup = true;\n          break;\n\n        case \"Group\":\n          throw new InvalidArgument(\n            \"A group must not be included in the properties to be grouped\"\n          );\n      }\n\n      if (!this.#propertyInstanceCount.has(prop.constructor.identifier))\n        continue;\n\n      let count = this.#propertyInstanceCount.get(prop.constructor.identifier);\n      count++;\n      this.#propertyInstanceCount.set(prop.constructor.identifier, count);\n    }\n  }\n\n  constructor(props, groupName) {\n    this.#validate(props, groupName);\n    this.#props = props;\n    this.#groupName = groupName;\n\n    Object.freeze(this);\n  }\n}\n\nObject.freeze(Group);\n"],"names":["_props","WeakMap","_groupName","_propertyInstanceCount","_validate","WeakSet","Group","props","groupName","_classCallCheck","_classPrivateMethodInitSpec","_classPrivateFieldInitSpec","writable","value","Map","_defineProperty","_classPrivateMethodGet","_validate2","call","_classPrivateFieldSet","Object","freeze","_createClass","key","get","_classPrivateFieldGet","repr","_this","CRLF","reduce","accumulatedProps","currentProp","push","concat","join","reprXML","valueXML","accumulatedParameters","currentParameter","reprJSON","_this2","prop","_objectSpread","group","MissingArgument","Array","isArray","InvalidArgument","length","TypeError","test","_iterator","_createForOfIteratorHelper","_step","s","n","done","constructor","identifier","hasMemberProperty","kindPropertyIsGroup","has","count","set","err","e","f","Set"],"mappings":"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"}