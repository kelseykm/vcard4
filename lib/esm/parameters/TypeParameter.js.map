{"version":3,"file":"TypeParameter.js","sources":["../../../src/parameters/TypeParameter.js"],"sourcesContent":["import { BaseParameter } from \"./BaseParameter.js\";\nimport { MissingArgument, InvalidArgument } from \"../errors/index.js\";\n\nexport class TypeParameter extends BaseParameter {\n  static param = \"TYPE\";\n  static identifier = \"TypeParameter\";\n\n  #typeValue;\n\n  get value() {\n    return Array.isArray(this.#typeValue)\n      ? `\"${this.#typeValue\n          .map((val) => val.repr())\n          .join(\",\")\n          .replaceAll('\"', \"\")}\"`\n      : this.#typeValue.repr();\n  }\n\n  get valueXML() {\n    return Array.isArray(this.#typeValue)\n      ? this.#typeValue.map((val) => val.reprXML()).join(\"\")\n      : this.#typeValue.reprXML();\n  }\n\n  get valueJSON() {\n    return Array.isArray(this.#typeValue)\n      ? [\"text\", ...this.#typeValue.map((val) => val._unsafe_raw_value)]\n      : this.#typeValue.reprJSON();\n  }\n\n  #typeRegExp = /^(?:work|home|x-[a-z0-9-]+)$/i;\n\n  #telTypeRegExp = /^(?:text|voice|fax|cell|video|pager|textphone|main)$/i;\n\n  #relatedTypeRegExp =\n    /(?:contact|acquaintance|friend|met|co-worker|colleague|co-resident|neighbor|child|parent|sibling|spouse|kin|muse|crush|date|sweetheart|me|agent|emergency)/i;\n\n  #validate(typeValue, targetProp) {\n    if (typeof typeValue === \"undefined\" || typeof targetProp === \"undefined\")\n      throw new MissingArgument(\n        \"Value and target property for TypeParameter must be supplied\"\n      );\n    else if (\n      !(\n        !Array.isArray(typeValue) &&\n        typeValue.constructor.identifier === \"ParameterValueType\"\n      ) &&\n      !(\n        Array.isArray(typeValue) &&\n        typeValue.every(\n          (val) => val.constructor.identifier === \"ParameterValueType\"\n        )\n      )\n    )\n      throw new TypeError(\n        \"Value for TypeParameter must be of type ParameterValueType or an array of ParameterValueTypes\"\n      );\n\n    const telre = new RegExp(\n      `(?:${this.#telTypeRegExp.source}|${this.#typeRegExp.source})`,\n      \"i\"\n    );\n    const relatedre = new RegExp(\n      `(?:${this.#relatedTypeRegExp.source}|${this.#typeRegExp.source})`,\n      \"i\"\n    );\n\n    switch (true) {\n      case /^TelProperty$/i.test(targetProp):\n        if (\n          !(!Array.isArray(typeValue) && telre.test(typeValue.repr())) &&\n          !(\n            Array.isArray(typeValue) &&\n            typeValue.every((type) => telre.test(type.repr()))\n          )\n        )\n          throw new InvalidArgument(\n            \"Invalid value for TypeParameter for TelProperty\"\n          );\n\n        break;\n      case /^RelatedProperty$/i.test(targetProp):\n        if (\n          !(!Array.isArray(typeValue) && relatedre.test(typeValue.repr())) &&\n          !(\n            Array.isArray(typeValue) &&\n            typeValue.every((type) => relatedre.test(type.repr()))\n          )\n        )\n          throw new InvalidArgument(\n            \"Invalid value for TypeParameter for RelatedProperty\"\n          );\n\n        break;\n      default:\n        if (\n          !(\n            !Array.isArray(typeValue) && this.#typeRegExp.test(typeValue.repr())\n          ) &&\n          !(\n            Array.isArray(typeValue) &&\n            typeValue.every((type) => this.#typeRegExp.test(type.repr()))\n          )\n        )\n          throw new InvalidArgument(\"Invalid value for TypeParameter\");\n    }\n  }\n\n  constructor(typeValue, targetProp) {\n    super();\n\n    this.#validate(typeValue, targetProp);\n    this.#typeValue = typeValue;\n\n    this.targetProp = targetProp.toUpperCase();\n\n    this.checkAbstractPropertiesAndMethods();\n    Object.freeze(this);\n  }\n}\n\nObject.freeze(TypeParameter);\n"],"names":["_typeValue","WeakMap","_typeRegExp","_telTypeRegExp","_relatedTypeRegExp","_validate","WeakSet","TypeParameter","_BaseParameter","_inherits","_super","_createSuper","typeValue","targetProp","_this","_classCallCheck","call","_classPrivateMethodInitSpec","_assertThisInitialized","_classPrivateFieldInitSpec","writable","value","_classPrivateMethodGet","_validate2","_classPrivateFieldSet","toUpperCase","checkAbstractPropertiesAndMethods","Object","freeze","_createClass","key","get","Array","isArray","_classPrivateFieldGet","concat","map","val","repr","join","replaceAll","reprXML","_toConsumableArray","_unsafe_raw_value","reprJSON","BaseParameter","_this2","MissingArgument","constructor","identifier","every","TypeError","telre","RegExp","source","relatedre","test","type","InvalidArgument","_defineProperty"],"mappings":"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"}