{"version":3,"file":"PIDParameter.js","sources":["../../../src/parameters/PIDParameter.js"],"sourcesContent":["import { BaseParameter } from \"./BaseParameter.js\";\nimport { MissingArgument, InvalidArgument } from \"../errors/index.js\";\n\nexport class PIDParameter extends BaseParameter {\n  static param = \"PID\";\n  static identifier = \"PIDParameter\";\n\n  #pidValue;\n  #pidRegExp = /^\\d+(?:\\.\\d+)?$/;\n\n  get value() {\n    return Array.isArray(this.#pidValue)\n      ? this.#pidValue\n          .map((val) => {\n            if (Array.isArray(val))\n              return val.map((innerVal) => innerVal.repr()).join(\".\");\n            return val.repr();\n          })\n          .join(\",\")\n      : this.#pidValue.repr();\n  }\n\n  get valueXML() {\n    const xml = Array.isArray(this.#pidValue)\n      ? this.#pidValue\n          .map((val) => {\n            if (Array.isArray(val))\n              return (\n                \"<integer>\" +\n                val.map((innerVal) => innerVal.repr()).join(\".\") +\n                \"</integer>\"\n              );\n\n            return val.reprXML();\n          })\n          .join(\"\")\n      : this.#pidValue.reprXML();\n\n    return xml.replaceAll(\"integer\", \"text\");\n  }\n\n  get valueJSON() {\n    return Array.isArray(this.#pidValue)\n      ? [\n          \"integer\",\n          ...this.#pidValue.map((val) => {\n            if (Array.isArray(val))\n              return Number(val.map((innerVal) => innerVal.repr()).join(\".\"));\n            return val.reprJSON().pop();\n          }),\n        ]\n      : this.#pidValue.reprJSON();\n  }\n\n  #validate(pidValue) {\n    if (typeof pidValue === \"undefined\")\n      throw new MissingArgument(\"Value for PIDParameter must be supplied\");\n    else if (\n      !Array.isArray(pidValue) &&\n      pidValue.constructor.identifier !== \"IntegerType\"\n    )\n      throw new InvalidArgument(\"Invalid value for PIDParameter\");\n    else if (\n      Array.isArray(pidValue) &&\n      !pidValue.every((val1) => {\n        if (Array.isArray(val1))\n          return (\n            val1.length === 2 &&\n            val1.every((val2) => val2.constructor.identifier === \"IntegerType\")\n          );\n        return val1.constructor.identifier === \"IntegerType\";\n      })\n    )\n      throw new InvalidArgument(\"Invalid value for PIDParameter\");\n  }\n\n  constructor(pidValue) {\n    super();\n\n    this.#validate(pidValue);\n    this.#pidValue = pidValue;\n\n    this.checkAbstractPropertiesAndMethods();\n    Object.freeze(this);\n  }\n}\n\nObject.freeze(PIDParameter);\n"],"names":["_pidValue","WeakMap","_pidRegExp","_validate","WeakSet","PIDParameter","_BaseParameter","_inherits","_super","_createSuper","pidValue","_this","_classCallCheck","call","_classPrivateMethodInitSpec","_assertThisInitialized","_classPrivateFieldInitSpec","writable","value","_classPrivateMethodGet","_validate2","_classPrivateFieldSet","checkAbstractPropertiesAndMethods","Object","freeze","_createClass","key","get","Array","isArray","_classPrivateFieldGet","map","val","innerVal","repr","join","xml","reprXML","replaceAll","concat","_toConsumableArray","Number","reprJSON","pop","BaseParameter","MissingArgument","constructor","identifier","InvalidArgument","every","val1","length","val2","_defineProperty"],"mappings":"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"}