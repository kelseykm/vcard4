"use strict";(self.webpackChunkvcard_4_docs=self.webpackChunkvcard_4_docs||[]).push([[7430],{3905:(e,t,r)=>{r.d(t,{Zo:()=>s,kt:()=>u});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function p(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=a.createContext({}),m=function(e){var t=a.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):p(p({},t),e)),r},s=function(e){var t=m(e.components);return a.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,l=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),d=m(r),u=n,y=d["".concat(l,".").concat(u)]||d[u]||c[u]||i;return r?a.createElement(y,p(p({ref:t},s),{},{components:r})):a.createElement(y,p({ref:t},s))}));function u(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,p=new Array(i);p[0]=d;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:n,p[1]=o;for(var m=2;m<i;m++)p[m]=r[m];return a.createElement.apply(null,p)}return a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},807:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>p,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>m});var a=r(7462),n=(r(7294),r(3905));const i={title:"PIDParameter",sidebar_position:6,hide_title:!0},p="PIDParameter",o={unversionedId:"documentation/parameters/pidparameter",id:"documentation/parameters/pidparameter",title:"PIDParameter",description:'- This class represents the "PID" parameter',source:"@site/docs/documentation/parameters/pidparameter.md",sourceDirName:"documentation/parameters",slug:"/documentation/parameters/pidparameter",permalink:"/vcard4/documentation/parameters/pidparameter",draft:!1,tags:[],version:"current",sidebarPosition:6,frontMatter:{title:"PIDParameter",sidebar_position:6,hide_title:!0},sidebar:"tutorialSidebar",previous:{title:"AltidParameter",permalink:"/vcard4/documentation/parameters/altidparameter"},next:{title:"TypeParameter",permalink:"/vcard4/documentation/parameters/typeparameter"}},l={},m=[],s={toc:m};function c(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,a.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"pidparameter"},(0,n.kt)("inlineCode",{parentName:"h1"},"PIDParameter")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},'This class represents the "PID" parameter')),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},'According to the RFC, its value is either a single small positive integer or\na pair of small positive integers separated by a dot. Multiple values may be\nencoded in a single PID parameter by separating the values with a comma ","')),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Therefore, ",(0,n.kt)("inlineCode",{parentName:"p"},"PIDParameter")," should be called with a single argument that is\neither:"),(0,n.kt)("ol",{parentName:"li"},(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"an instance of\n",(0,n.kt)("a",{parentName:"p",href:"/documentation/values/integertype-and-integerlisttype"},(0,n.kt)("inlineCode",{parentName:"a"},"IntegerType"))),(0,n.kt)("p",{parentName:"li"},"If you intend the value to be a single small positive integer"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-js"},"const pid = new PIDParameter(new IntegerType(3));\n\n// calling repr\npid.repr();\n// PID=3\n"))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"an array of instances of\n",(0,n.kt)("a",{parentName:"p",href:"/documentation/values/integertype-and-integerlisttype"},(0,n.kt)("inlineCode",{parentName:"a"},"IntegerType"))),(0,n.kt)("p",{parentName:"li"},"If you intend to have multiple values encoded in the parameter and\nseparated by a comma"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-js"},"const pid = new PIDParameter([new IntegerType(3), new IntegerType(7)]);\n\n// calling repr\npid.repr();\n// PID=3,7\n"))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"a nested array of instances of\n",(0,n.kt)("a",{parentName:"p",href:"/documentation/values/integertype-and-integerlisttype"},(0,n.kt)("inlineCode",{parentName:"a"},"IntegerType"))),(0,n.kt)("p",{parentName:"li"},"If you intend to have the value be a pair of small positive integers\nseparated by a dot"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-js"},"const pid = new PIDParameter([[new IntegerType(1), new IntegerType(5)]]);\n\n// calling repr\npid.repr();\n// PID=1.5\n"))))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"You may also combine the last two, as below"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-js"},"const pid = new PIDParameter([\n  [new IntegerType(1), new IntegerType(7)],\n  new IntegerType(23),\n  new IntegerType(24),\n]);\n\n// calling repr\npid.repr();\n// PID=1.7,23,24\n")))))}c.isMDXComponent=!0}}]);